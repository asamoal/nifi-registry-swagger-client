/*
 * Apache NiFi Registry REST API
 * The REST API provides an interface to a registry with operations for saving, versioning, reading NiFi flows and components.
 *
 * OpenAPI spec version: 1.19.1
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi_registry.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.github.asamoal.nifi_registry.swagger.client.model.ComponentDifferenceGroup;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * VersionedFlowDifference
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-04-12T14:23:29.468928+02:00[Europe/Berlin]")
public class VersionedFlowDifference {
  @SerializedName("bucketId")
  private String bucketId = null;

  @SerializedName("flowId")
  private String flowId = null;

  @SerializedName("versionA")
  private Integer versionA = null;

  @SerializedName("versionB")
  private Integer versionB = null;

  @SerializedName("componentDifferenceGroups")
  private List<ComponentDifferenceGroup> componentDifferenceGroups = null;

  public VersionedFlowDifference bucketId(String bucketId) {
    this.bucketId = bucketId;
    return this;
  }

   /**
   * The id of the bucket that the flow is stored in.
   * @return bucketId
  **/
  @Schema(description = "The id of the bucket that the flow is stored in.")
  public String getBucketId() {
    return bucketId;
  }

  public void setBucketId(String bucketId) {
    this.bucketId = bucketId;
  }

  public VersionedFlowDifference flowId(String flowId) {
    this.flowId = flowId;
    return this;
  }

   /**
   * The id of the flow that is being examined.
   * @return flowId
  **/
  @Schema(description = "The id of the flow that is being examined.")
  public String getFlowId() {
    return flowId;
  }

  public void setFlowId(String flowId) {
    this.flowId = flowId;
  }

  public VersionedFlowDifference versionA(Integer versionA) {
    this.versionA = versionA;
    return this;
  }

   /**
   * The earlier version from the diff operation.
   * @return versionA
  **/
  @Schema(description = "The earlier version from the diff operation.")
  public Integer getVersionA() {
    return versionA;
  }

  public void setVersionA(Integer versionA) {
    this.versionA = versionA;
  }

  public VersionedFlowDifference versionB(Integer versionB) {
    this.versionB = versionB;
    return this;
  }

   /**
   * The latter version from the diff operation.
   * @return versionB
  **/
  @Schema(description = "The latter version from the diff operation.")
  public Integer getVersionB() {
    return versionB;
  }

  public void setVersionB(Integer versionB) {
    this.versionB = versionB;
  }

  public VersionedFlowDifference componentDifferenceGroups(List<ComponentDifferenceGroup> componentDifferenceGroups) {
    this.componentDifferenceGroups = componentDifferenceGroups;
    return this;
  }

  public VersionedFlowDifference addComponentDifferenceGroupsItem(ComponentDifferenceGroup componentDifferenceGroupsItem) {
    if (this.componentDifferenceGroups == null) {
      this.componentDifferenceGroups = new ArrayList<ComponentDifferenceGroup>();
    }
    this.componentDifferenceGroups.add(componentDifferenceGroupsItem);
    return this;
  }

   /**
   * Get componentDifferenceGroups
   * @return componentDifferenceGroups
  **/
  @Schema(description = "")
  public List<ComponentDifferenceGroup> getComponentDifferenceGroups() {
    return componentDifferenceGroups;
  }

  public void setComponentDifferenceGroups(List<ComponentDifferenceGroup> componentDifferenceGroups) {
    this.componentDifferenceGroups = componentDifferenceGroups;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionedFlowDifference versionedFlowDifference = (VersionedFlowDifference) o;
    return Objects.equals(this.bucketId, versionedFlowDifference.bucketId) &&
        Objects.equals(this.flowId, versionedFlowDifference.flowId) &&
        Objects.equals(this.versionA, versionedFlowDifference.versionA) &&
        Objects.equals(this.versionB, versionedFlowDifference.versionB) &&
        Objects.equals(this.componentDifferenceGroups, versionedFlowDifference.componentDifferenceGroups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucketId, flowId, versionA, versionB, componentDifferenceGroups);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionedFlowDifference {\n");
    
    sb.append("    bucketId: ").append(toIndentedString(bucketId)).append("\n");
    sb.append("    flowId: ").append(toIndentedString(flowId)).append("\n");
    sb.append("    versionA: ").append(toIndentedString(versionA)).append("\n");
    sb.append("    versionB: ").append(toIndentedString(versionB)).append("\n");
    sb.append("    componentDifferenceGroups: ").append(toIndentedString(componentDifferenceGroups)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
