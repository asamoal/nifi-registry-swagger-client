/*
 * Apache NiFi Registry REST API
 * The REST API provides an interface to a registry with operations for saving, versioning, reading NiFi flows and components.
 *
 * OpenAPI spec version: 1.19.1
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi_registry.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * BundleInfo
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-04-12T14:23:29.468928+02:00[Europe/Berlin]")
public class BundleInfo {
  @SerializedName("bucketId")
  private String bucketId = null;

  @SerializedName("bucketName")
  private String bucketName = null;

  @SerializedName("bundleId")
  private String bundleId = null;

  /**
   * The type of bundle (i.e. a NiFi NAR vs MiNiFi CPP)
   */
  @JsonAdapter(BundleTypeEnum.Adapter.class)
  public enum BundleTypeEnum {
    NIFI_NAR("NIFI_NAR"),
    MINIFI_CPP("MINIFI_CPP");

    private String value;

    BundleTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static BundleTypeEnum fromValue(String input) {
      for (BundleTypeEnum b : BundleTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<BundleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BundleTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public BundleTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return BundleTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("bundleType")
  private BundleTypeEnum bundleType = null;

  @SerializedName("groupId")
  private String groupId = null;

  @SerializedName("artifactId")
  private String artifactId = null;

  @SerializedName("version")
  private String version = null;

  @SerializedName("systemApiVersion")
  private String systemApiVersion = null;

  public BundleInfo bucketId(String bucketId) {
    this.bucketId = bucketId;
    return this;
  }

   /**
   * The id of the bucket where the bundle is located
   * @return bucketId
  **/
  @Schema(description = "The id of the bucket where the bundle is located")
  public String getBucketId() {
    return bucketId;
  }

  public void setBucketId(String bucketId) {
    this.bucketId = bucketId;
  }

  public BundleInfo bucketName(String bucketName) {
    this.bucketName = bucketName;
    return this;
  }

   /**
   * The name of the bucket where the bundle is located
   * @return bucketName
  **/
  @Schema(description = "The name of the bucket where the bundle is located")
  public String getBucketName() {
    return bucketName;
  }

  public void setBucketName(String bucketName) {
    this.bucketName = bucketName;
  }

  public BundleInfo bundleId(String bundleId) {
    this.bundleId = bundleId;
    return this;
  }

   /**
   * The id of the bundle
   * @return bundleId
  **/
  @Schema(description = "The id of the bundle")
  public String getBundleId() {
    return bundleId;
  }

  public void setBundleId(String bundleId) {
    this.bundleId = bundleId;
  }

  public BundleInfo bundleType(BundleTypeEnum bundleType) {
    this.bundleType = bundleType;
    return this;
  }

   /**
   * The type of bundle (i.e. a NiFi NAR vs MiNiFi CPP)
   * @return bundleType
  **/
  @Schema(description = "The type of bundle (i.e. a NiFi NAR vs MiNiFi CPP)")
  public BundleTypeEnum getBundleType() {
    return bundleType;
  }

  public void setBundleType(BundleTypeEnum bundleType) {
    this.bundleType = bundleType;
  }

  public BundleInfo groupId(String groupId) {
    this.groupId = groupId;
    return this;
  }

   /**
   * The group id of the bundle
   * @return groupId
  **/
  @Schema(description = "The group id of the bundle")
  public String getGroupId() {
    return groupId;
  }

  public void setGroupId(String groupId) {
    this.groupId = groupId;
  }

  public BundleInfo artifactId(String artifactId) {
    this.artifactId = artifactId;
    return this;
  }

   /**
   * The artifact id of the bundle
   * @return artifactId
  **/
  @Schema(description = "The artifact id of the bundle")
  public String getArtifactId() {
    return artifactId;
  }

  public void setArtifactId(String artifactId) {
    this.artifactId = artifactId;
  }

  public BundleInfo version(String version) {
    this.version = version;
    return this;
  }

   /**
   * The version of the bundle
   * @return version
  **/
  @Schema(description = "The version of the bundle")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public BundleInfo systemApiVersion(String systemApiVersion) {
    this.systemApiVersion = systemApiVersion;
    return this;
  }

   /**
   * The version of the system API the bundle was built against
   * @return systemApiVersion
  **/
  @Schema(description = "The version of the system API the bundle was built against")
  public String getSystemApiVersion() {
    return systemApiVersion;
  }

  public void setSystemApiVersion(String systemApiVersion) {
    this.systemApiVersion = systemApiVersion;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BundleInfo bundleInfo = (BundleInfo) o;
    return Objects.equals(this.bucketId, bundleInfo.bucketId) &&
        Objects.equals(this.bucketName, bundleInfo.bucketName) &&
        Objects.equals(this.bundleId, bundleInfo.bundleId) &&
        Objects.equals(this.bundleType, bundleInfo.bundleType) &&
        Objects.equals(this.groupId, bundleInfo.groupId) &&
        Objects.equals(this.artifactId, bundleInfo.artifactId) &&
        Objects.equals(this.version, bundleInfo.version) &&
        Objects.equals(this.systemApiVersion, bundleInfo.systemApiVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucketId, bucketName, bundleId, bundleType, groupId, artifactId, version, systemApiVersion);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BundleInfo {\n");
    
    sb.append("    bucketId: ").append(toIndentedString(bucketId)).append("\n");
    sb.append("    bucketName: ").append(toIndentedString(bucketName)).append("\n");
    sb.append("    bundleId: ").append(toIndentedString(bundleId)).append("\n");
    sb.append("    bundleType: ").append(toIndentedString(bundleType)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    artifactId: ").append(toIndentedString(artifactId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    systemApiVersion: ").append(toIndentedString(systemApiVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
