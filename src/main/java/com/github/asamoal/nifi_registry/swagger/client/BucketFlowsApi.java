/*
 * Apache NiFi Registry REST API
 * The REST API provides an interface to a registry with operations for saving, versioning, reading NiFi flows and components.
 *
 * OpenAPI spec version: 1.20.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi_registry.swagger.client;

import com.github.asamoal.nifi_registry.swagger.ApiCallback;
import com.github.asamoal.nifi_registry.swagger.ApiClient;
import com.github.asamoal.nifi_registry.swagger.ApiException;
import com.github.asamoal.nifi_registry.swagger.ApiResponse;
import com.github.asamoal.nifi_registry.swagger.Configuration;
import com.github.asamoal.nifi_registry.swagger.Pair;
import com.github.asamoal.nifi_registry.swagger.ProgressRequestBody;
import com.github.asamoal.nifi_registry.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.asamoal.nifi_registry.swagger.client.model.VersionedFlow;
import com.github.asamoal.nifi_registry.swagger.client.model.VersionedFlowDifference;
import com.github.asamoal.nifi_registry.swagger.client.model.VersionedFlowSnapshot;
import com.github.asamoal.nifi_registry.swagger.client.model.VersionedFlowSnapshotMetadata;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BucketFlowsApi {
    private ApiClient apiClient;

    public BucketFlowsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BucketFlowsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createFlow
     * @param body The details of the flow to create. (required)
     * @param bucketId The bucket identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createFlowCall(VersionedFlow body, String bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/buckets/{bucketId}/flows"
            .replaceAll("\\{" + "bucketId" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createFlowValidateBeforeCall(VersionedFlow body, String bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createFlow(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling createFlow(Async)");
        }
        
        com.squareup.okhttp.Call call = createFlowCall(body, bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create flow
     * Creates a flow in the given bucket. The flow id is created by the server and populated in the returned entity.
     * @param body The details of the flow to create. (required)
     * @param bucketId The bucket identifier (required)
     * @return VersionedFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionedFlow createFlow(VersionedFlow body, String bucketId) throws ApiException {
        ApiResponse<VersionedFlow> resp = createFlowWithHttpInfo(body, bucketId);
        return resp.getData();
    }

    /**
     * Create flow
     * Creates a flow in the given bucket. The flow id is created by the server and populated in the returned entity.
     * @param body The details of the flow to create. (required)
     * @param bucketId The bucket identifier (required)
     * @return ApiResponse&lt;VersionedFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionedFlow> createFlowWithHttpInfo(VersionedFlow body, String bucketId) throws ApiException {
        com.squareup.okhttp.Call call = createFlowValidateBeforeCall(body, bucketId, null, null);
        Type localVarReturnType = new TypeToken<VersionedFlow>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create flow (asynchronously)
     * Creates a flow in the given bucket. The flow id is created by the server and populated in the returned entity.
     * @param body The details of the flow to create. (required)
     * @param bucketId The bucket identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createFlowAsync(VersionedFlow body, String bucketId, final ApiCallback<VersionedFlow> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createFlowValidateBeforeCall(body, bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionedFlow>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createFlowVersion
     * @param body The new versioned flow snapshot. (required)
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createFlowVersionCall(VersionedFlowSnapshot body, String bucketId, String flowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/buckets/{bucketId}/flows/{flowId}/versions"
            .replaceAll("\\{" + "bucketId" + "\\}", apiClient.escapeString(bucketId.toString()))
            .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(flowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createFlowVersionValidateBeforeCall(VersionedFlowSnapshot body, String bucketId, String flowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createFlowVersion(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling createFlowVersion(Async)");
        }
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling createFlowVersion(Async)");
        }
        
        com.squareup.okhttp.Call call = createFlowVersionCall(body, bucketId, flowId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create flow version
     * Creates the next version of a flow. The version number of the object being created must be the next available version integer. Flow versions are immutable after they are created.
     * @param body The new versioned flow snapshot. (required)
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @return VersionedFlowSnapshot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionedFlowSnapshot createFlowVersion(VersionedFlowSnapshot body, String bucketId, String flowId) throws ApiException {
        ApiResponse<VersionedFlowSnapshot> resp = createFlowVersionWithHttpInfo(body, bucketId, flowId);
        return resp.getData();
    }

    /**
     * Create flow version
     * Creates the next version of a flow. The version number of the object being created must be the next available version integer. Flow versions are immutable after they are created.
     * @param body The new versioned flow snapshot. (required)
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @return ApiResponse&lt;VersionedFlowSnapshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionedFlowSnapshot> createFlowVersionWithHttpInfo(VersionedFlowSnapshot body, String bucketId, String flowId) throws ApiException {
        com.squareup.okhttp.Call call = createFlowVersionValidateBeforeCall(body, bucketId, flowId, null, null);
        Type localVarReturnType = new TypeToken<VersionedFlowSnapshot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create flow version (asynchronously)
     * Creates the next version of a flow. The version number of the object being created must be the next available version integer. Flow versions are immutable after they are created.
     * @param body The new versioned flow snapshot. (required)
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createFlowVersionAsync(VersionedFlowSnapshot body, String bucketId, String flowId, final ApiCallback<VersionedFlowSnapshot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createFlowVersionValidateBeforeCall(body, bucketId, flowId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionedFlowSnapshot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteFlow
     * @param version The version is used to verify the client is working with the latest version of the entity. (required)
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param clientId If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFlowCall(String version, String bucketId, String flowId, String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/buckets/{bucketId}/flows/{flowId}"
            .replaceAll("\\{" + "bucketId" + "\\}", apiClient.escapeString(bucketId.toString()))
            .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(flowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clientId", clientId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFlowValidateBeforeCall(String version, String bucketId, String flowId, String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling deleteFlow(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling deleteFlow(Async)");
        }
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling deleteFlow(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteFlowCall(version, bucketId, flowId, clientId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete bucket flow
     * Deletes a flow, including all saved versions of that flow.
     * @param version The version is used to verify the client is working with the latest version of the entity. (required)
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param clientId If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)
     * @return VersionedFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionedFlow deleteFlow(String version, String bucketId, String flowId, String clientId) throws ApiException {
        ApiResponse<VersionedFlow> resp = deleteFlowWithHttpInfo(version, bucketId, flowId, clientId);
        return resp.getData();
    }

    /**
     * Delete bucket flow
     * Deletes a flow, including all saved versions of that flow.
     * @param version The version is used to verify the client is working with the latest version of the entity. (required)
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param clientId If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)
     * @return ApiResponse&lt;VersionedFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionedFlow> deleteFlowWithHttpInfo(String version, String bucketId, String flowId, String clientId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFlowValidateBeforeCall(version, bucketId, flowId, clientId, null, null);
        Type localVarReturnType = new TypeToken<VersionedFlow>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete bucket flow (asynchronously)
     * Deletes a flow, including all saved versions of that flow.
     * @param version The version is used to verify the client is working with the latest version of the entity. (required)
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param clientId If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFlowAsync(String version, String bucketId, String flowId, String clientId, final ApiCallback<VersionedFlow> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFlowValidateBeforeCall(version, bucketId, flowId, clientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionedFlow>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for exportVersionedFlow
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param versionNumber The version number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call exportVersionedFlowCall(String bucketId, String flowId, Integer versionNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/buckets/{bucketId}/flows/{flowId}/versions/{versionNumber}/export"
            .replaceAll("\\{" + "bucketId" + "\\}", apiClient.escapeString(bucketId.toString()))
            .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(flowId.toString()))
            .replaceAll("\\{" + "versionNumber" + "\\}", apiClient.escapeString(versionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call exportVersionedFlowValidateBeforeCall(String bucketId, String flowId, Integer versionNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling exportVersionedFlow(Async)");
        }
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling exportVersionedFlow(Async)");
        }
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling exportVersionedFlow(Async)");
        }
        
        com.squareup.okhttp.Call call = exportVersionedFlowCall(bucketId, flowId, versionNumber, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Exports specified bucket flow version content
     * Exports the specified version of a flow, including the metadata and content of the flow.
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param versionNumber The version number (required)
     * @return VersionedFlowSnapshot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionedFlowSnapshot exportVersionedFlow(String bucketId, String flowId, Integer versionNumber) throws ApiException {
        ApiResponse<VersionedFlowSnapshot> resp = exportVersionedFlowWithHttpInfo(bucketId, flowId, versionNumber);
        return resp.getData();
    }

    /**
     * Exports specified bucket flow version content
     * Exports the specified version of a flow, including the metadata and content of the flow.
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param versionNumber The version number (required)
     * @return ApiResponse&lt;VersionedFlowSnapshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionedFlowSnapshot> exportVersionedFlowWithHttpInfo(String bucketId, String flowId, Integer versionNumber) throws ApiException {
        com.squareup.okhttp.Call call = exportVersionedFlowValidateBeforeCall(bucketId, flowId, versionNumber, null, null);
        Type localVarReturnType = new TypeToken<VersionedFlowSnapshot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Exports specified bucket flow version content (asynchronously)
     * Exports the specified version of a flow, including the metadata and content of the flow.
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param versionNumber The version number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportVersionedFlowAsync(String bucketId, String flowId, Integer versionNumber, final ApiCallback<VersionedFlowSnapshot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportVersionedFlowValidateBeforeCall(bucketId, flowId, versionNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionedFlowSnapshot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFlow
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFlowCall(String bucketId, String flowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/buckets/{bucketId}/flows/{flowId}"
            .replaceAll("\\{" + "bucketId" + "\\}", apiClient.escapeString(bucketId.toString()))
            .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(flowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFlowValidateBeforeCall(String bucketId, String flowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling getFlow(Async)");
        }
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling getFlow(Async)");
        }
        
        com.squareup.okhttp.Call call = getFlowCall(bucketId, flowId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get bucket flow
     * Retrieves the flow with the given id in the given bucket.
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @return VersionedFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionedFlow getFlow(String bucketId, String flowId) throws ApiException {
        ApiResponse<VersionedFlow> resp = getFlowWithHttpInfo(bucketId, flowId);
        return resp.getData();
    }

    /**
     * Get bucket flow
     * Retrieves the flow with the given id in the given bucket.
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @return ApiResponse&lt;VersionedFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionedFlow> getFlowWithHttpInfo(String bucketId, String flowId) throws ApiException {
        com.squareup.okhttp.Call call = getFlowValidateBeforeCall(bucketId, flowId, null, null);
        Type localVarReturnType = new TypeToken<VersionedFlow>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get bucket flow (asynchronously)
     * Retrieves the flow with the given id in the given bucket.
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFlowAsync(String bucketId, String flowId, final ApiCallback<VersionedFlow> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFlowValidateBeforeCall(bucketId, flowId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionedFlow>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFlowDiff
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param versionA The first version number (required)
     * @param versionB The second version number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFlowDiffCall(String bucketId, String flowId, Integer versionA, Integer versionB, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/buckets/{bucketId}/flows/{flowId}/diff/{versionA}/{versionB}"
            .replaceAll("\\{" + "bucketId" + "\\}", apiClient.escapeString(bucketId.toString()))
            .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(flowId.toString()))
            .replaceAll("\\{" + "versionA" + "\\}", apiClient.escapeString(versionA.toString()))
            .replaceAll("\\{" + "versionB" + "\\}", apiClient.escapeString(versionB.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFlowDiffValidateBeforeCall(String bucketId, String flowId, Integer versionA, Integer versionB, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling getFlowDiff(Async)");
        }
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling getFlowDiff(Async)");
        }
        // verify the required parameter 'versionA' is set
        if (versionA == null) {
            throw new ApiException("Missing the required parameter 'versionA' when calling getFlowDiff(Async)");
        }
        // verify the required parameter 'versionB' is set
        if (versionB == null) {
            throw new ApiException("Missing the required parameter 'versionB' when calling getFlowDiff(Async)");
        }
        
        com.squareup.okhttp.Call call = getFlowDiffCall(bucketId, flowId, versionA, versionB, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get bucket flow diff
     * Computes the differences between two given versions of a flow.
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param versionA The first version number (required)
     * @param versionB The second version number (required)
     * @return VersionedFlowDifference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionedFlowDifference getFlowDiff(String bucketId, String flowId, Integer versionA, Integer versionB) throws ApiException {
        ApiResponse<VersionedFlowDifference> resp = getFlowDiffWithHttpInfo(bucketId, flowId, versionA, versionB);
        return resp.getData();
    }

    /**
     * Get bucket flow diff
     * Computes the differences between two given versions of a flow.
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param versionA The first version number (required)
     * @param versionB The second version number (required)
     * @return ApiResponse&lt;VersionedFlowDifference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionedFlowDifference> getFlowDiffWithHttpInfo(String bucketId, String flowId, Integer versionA, Integer versionB) throws ApiException {
        com.squareup.okhttp.Call call = getFlowDiffValidateBeforeCall(bucketId, flowId, versionA, versionB, null, null);
        Type localVarReturnType = new TypeToken<VersionedFlowDifference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get bucket flow diff (asynchronously)
     * Computes the differences between two given versions of a flow.
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param versionA The first version number (required)
     * @param versionB The second version number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFlowDiffAsync(String bucketId, String flowId, Integer versionA, Integer versionB, final ApiCallback<VersionedFlowDifference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFlowDiffValidateBeforeCall(bucketId, flowId, versionA, versionB, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionedFlowDifference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFlowVersion
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param versionNumber The version number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFlowVersionCall(String bucketId, String flowId, Integer versionNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/buckets/{bucketId}/flows/{flowId}/versions/{versionNumber}"
            .replaceAll("\\{" + "bucketId" + "\\}", apiClient.escapeString(bucketId.toString()))
            .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(flowId.toString()))
            .replaceAll("\\{" + "versionNumber" + "\\}", apiClient.escapeString(versionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFlowVersionValidateBeforeCall(String bucketId, String flowId, Integer versionNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling getFlowVersion(Async)");
        }
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling getFlowVersion(Async)");
        }
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling getFlowVersion(Async)");
        }
        
        com.squareup.okhttp.Call call = getFlowVersionCall(bucketId, flowId, versionNumber, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get bucket flow version
     * Gets the given version of a flow, including the metadata and content for the version.
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param versionNumber The version number (required)
     * @return VersionedFlowSnapshot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionedFlowSnapshot getFlowVersion(String bucketId, String flowId, Integer versionNumber) throws ApiException {
        ApiResponse<VersionedFlowSnapshot> resp = getFlowVersionWithHttpInfo(bucketId, flowId, versionNumber);
        return resp.getData();
    }

    /**
     * Get bucket flow version
     * Gets the given version of a flow, including the metadata and content for the version.
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param versionNumber The version number (required)
     * @return ApiResponse&lt;VersionedFlowSnapshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionedFlowSnapshot> getFlowVersionWithHttpInfo(String bucketId, String flowId, Integer versionNumber) throws ApiException {
        com.squareup.okhttp.Call call = getFlowVersionValidateBeforeCall(bucketId, flowId, versionNumber, null, null);
        Type localVarReturnType = new TypeToken<VersionedFlowSnapshot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get bucket flow version (asynchronously)
     * Gets the given version of a flow, including the metadata and content for the version.
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param versionNumber The version number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFlowVersionAsync(String bucketId, String flowId, Integer versionNumber, final ApiCallback<VersionedFlowSnapshot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFlowVersionValidateBeforeCall(bucketId, flowId, versionNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionedFlowSnapshot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFlowVersions
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFlowVersionsCall(String bucketId, String flowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/buckets/{bucketId}/flows/{flowId}/versions"
            .replaceAll("\\{" + "bucketId" + "\\}", apiClient.escapeString(bucketId.toString()))
            .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(flowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFlowVersionsValidateBeforeCall(String bucketId, String flowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling getFlowVersions(Async)");
        }
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling getFlowVersions(Async)");
        }
        
        com.squareup.okhttp.Call call = getFlowVersionsCall(bucketId, flowId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get bucket flow versions
     * Gets summary information for all versions of a flow. Versions are ordered newest-&gt;oldest.
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @return List&lt;VersionedFlowSnapshotMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<VersionedFlowSnapshotMetadata> getFlowVersions(String bucketId, String flowId) throws ApiException {
        ApiResponse<List<VersionedFlowSnapshotMetadata>> resp = getFlowVersionsWithHttpInfo(bucketId, flowId);
        return resp.getData();
    }

    /**
     * Get bucket flow versions
     * Gets summary information for all versions of a flow. Versions are ordered newest-&gt;oldest.
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @return ApiResponse&lt;List&lt;VersionedFlowSnapshotMetadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<VersionedFlowSnapshotMetadata>> getFlowVersionsWithHttpInfo(String bucketId, String flowId) throws ApiException {
        com.squareup.okhttp.Call call = getFlowVersionsValidateBeforeCall(bucketId, flowId, null, null);
        Type localVarReturnType = new TypeToken<List<VersionedFlowSnapshotMetadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get bucket flow versions (asynchronously)
     * Gets summary information for all versions of a flow. Versions are ordered newest-&gt;oldest.
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFlowVersionsAsync(String bucketId, String flowId, final ApiCallback<List<VersionedFlowSnapshotMetadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFlowVersionsValidateBeforeCall(bucketId, flowId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<VersionedFlowSnapshotMetadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFlows
     * @param bucketId The bucket identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFlowsCall(String bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/buckets/{bucketId}/flows"
            .replaceAll("\\{" + "bucketId" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFlowsValidateBeforeCall(String bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling getFlows(Async)");
        }
        
        com.squareup.okhttp.Call call = getFlowsCall(bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get bucket flows
     * Retrieves all flows in the given bucket.
     * @param bucketId The bucket identifier (required)
     * @return List&lt;VersionedFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<VersionedFlow> getFlows(String bucketId) throws ApiException {
        ApiResponse<List<VersionedFlow>> resp = getFlowsWithHttpInfo(bucketId);
        return resp.getData();
    }

    /**
     * Get bucket flows
     * Retrieves all flows in the given bucket.
     * @param bucketId The bucket identifier (required)
     * @return ApiResponse&lt;List&lt;VersionedFlow&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<VersionedFlow>> getFlowsWithHttpInfo(String bucketId) throws ApiException {
        com.squareup.okhttp.Call call = getFlowsValidateBeforeCall(bucketId, null, null);
        Type localVarReturnType = new TypeToken<List<VersionedFlow>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get bucket flows (asynchronously)
     * Retrieves all flows in the given bucket.
     * @param bucketId The bucket identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFlowsAsync(String bucketId, final ApiCallback<List<VersionedFlow>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFlowsValidateBeforeCall(bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<VersionedFlow>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLatestFlowVersion
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLatestFlowVersionCall(String bucketId, String flowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/buckets/{bucketId}/flows/{flowId}/versions/latest"
            .replaceAll("\\{" + "bucketId" + "\\}", apiClient.escapeString(bucketId.toString()))
            .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(flowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLatestFlowVersionValidateBeforeCall(String bucketId, String flowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling getLatestFlowVersion(Async)");
        }
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling getLatestFlowVersion(Async)");
        }
        
        com.squareup.okhttp.Call call = getLatestFlowVersionCall(bucketId, flowId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get latest bucket flow version content
     * Gets the latest version of a flow, including the metadata and content of the flow.
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @return VersionedFlowSnapshot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionedFlowSnapshot getLatestFlowVersion(String bucketId, String flowId) throws ApiException {
        ApiResponse<VersionedFlowSnapshot> resp = getLatestFlowVersionWithHttpInfo(bucketId, flowId);
        return resp.getData();
    }

    /**
     * Get latest bucket flow version content
     * Gets the latest version of a flow, including the metadata and content of the flow.
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @return ApiResponse&lt;VersionedFlowSnapshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionedFlowSnapshot> getLatestFlowVersionWithHttpInfo(String bucketId, String flowId) throws ApiException {
        com.squareup.okhttp.Call call = getLatestFlowVersionValidateBeforeCall(bucketId, flowId, null, null);
        Type localVarReturnType = new TypeToken<VersionedFlowSnapshot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get latest bucket flow version content (asynchronously)
     * Gets the latest version of a flow, including the metadata and content of the flow.
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLatestFlowVersionAsync(String bucketId, String flowId, final ApiCallback<VersionedFlowSnapshot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLatestFlowVersionValidateBeforeCall(bucketId, flowId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionedFlowSnapshot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLatestFlowVersionMetadata
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLatestFlowVersionMetadataCall(String bucketId, String flowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/buckets/{bucketId}/flows/{flowId}/versions/latest/metadata"
            .replaceAll("\\{" + "bucketId" + "\\}", apiClient.escapeString(bucketId.toString()))
            .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(flowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLatestFlowVersionMetadataValidateBeforeCall(String bucketId, String flowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling getLatestFlowVersionMetadata(Async)");
        }
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling getLatestFlowVersionMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = getLatestFlowVersionMetadataCall(bucketId, flowId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get latest bucket flow version metadata
     * Gets the metadata for the latest version of a flow.
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @return VersionedFlowSnapshotMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionedFlowSnapshotMetadata getLatestFlowVersionMetadata(String bucketId, String flowId) throws ApiException {
        ApiResponse<VersionedFlowSnapshotMetadata> resp = getLatestFlowVersionMetadataWithHttpInfo(bucketId, flowId);
        return resp.getData();
    }

    /**
     * Get latest bucket flow version metadata
     * Gets the metadata for the latest version of a flow.
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @return ApiResponse&lt;VersionedFlowSnapshotMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionedFlowSnapshotMetadata> getLatestFlowVersionMetadataWithHttpInfo(String bucketId, String flowId) throws ApiException {
        com.squareup.okhttp.Call call = getLatestFlowVersionMetadataValidateBeforeCall(bucketId, flowId, null, null);
        Type localVarReturnType = new TypeToken<VersionedFlowSnapshotMetadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get latest bucket flow version metadata (asynchronously)
     * Gets the metadata for the latest version of a flow.
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLatestFlowVersionMetadataAsync(String bucketId, String flowId, final ApiCallback<VersionedFlowSnapshotMetadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLatestFlowVersionMetadataValidateBeforeCall(bucketId, flowId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionedFlowSnapshotMetadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for importVersionedFlow
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param body file (optional)
     * @param comments  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importVersionedFlowCall(String bucketId, String flowId, VersionedFlowSnapshot body, String comments, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/buckets/{bucketId}/flows/{flowId}/versions/import"
            .replaceAll("\\{" + "bucketId" + "\\}", apiClient.escapeString(bucketId.toString()))
            .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(flowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (comments != null)
        localVarHeaderParams.put("Comments", apiClient.parameterToString(comments));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importVersionedFlowValidateBeforeCall(String bucketId, String flowId, VersionedFlowSnapshot body, String comments, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling importVersionedFlow(Async)");
        }
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling importVersionedFlow(Async)");
        }
        
        com.squareup.okhttp.Call call = importVersionedFlowCall(bucketId, flowId, body, comments, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Import flow version
     * Import the next version of a flow. The version number of the object being created will be the next available version integer. Flow versions are immutable after they are created.
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param body file (optional)
     * @param comments  (optional)
     * @return VersionedFlowSnapshot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionedFlowSnapshot importVersionedFlow(String bucketId, String flowId, VersionedFlowSnapshot body, String comments) throws ApiException {
        ApiResponse<VersionedFlowSnapshot> resp = importVersionedFlowWithHttpInfo(bucketId, flowId, body, comments);
        return resp.getData();
    }

    /**
     * Import flow version
     * Import the next version of a flow. The version number of the object being created will be the next available version integer. Flow versions are immutable after they are created.
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param body file (optional)
     * @param comments  (optional)
     * @return ApiResponse&lt;VersionedFlowSnapshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionedFlowSnapshot> importVersionedFlowWithHttpInfo(String bucketId, String flowId, VersionedFlowSnapshot body, String comments) throws ApiException {
        com.squareup.okhttp.Call call = importVersionedFlowValidateBeforeCall(bucketId, flowId, body, comments, null, null);
        Type localVarReturnType = new TypeToken<VersionedFlowSnapshot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Import flow version (asynchronously)
     * Import the next version of a flow. The version number of the object being created will be the next available version integer. Flow versions are immutable after they are created.
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param body file (optional)
     * @param comments  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importVersionedFlowAsync(String bucketId, String flowId, VersionedFlowSnapshot body, String comments, final ApiCallback<VersionedFlowSnapshot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importVersionedFlowValidateBeforeCall(bucketId, flowId, body, comments, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionedFlowSnapshot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateFlow
     * @param body The updated flow (required)
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFlowCall(VersionedFlow body, String bucketId, String flowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/buckets/{bucketId}/flows/{flowId}"
            .replaceAll("\\{" + "bucketId" + "\\}", apiClient.escapeString(bucketId.toString()))
            .replaceAll("\\{" + "flowId" + "\\}", apiClient.escapeString(flowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFlowValidateBeforeCall(VersionedFlow body, String bucketId, String flowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateFlow(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling updateFlow(Async)");
        }
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling updateFlow(Async)");
        }
        
        com.squareup.okhttp.Call call = updateFlowCall(body, bucketId, flowId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update bucket flow
     * Updates the flow with the given id in the given bucket.
     * @param body The updated flow (required)
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @return VersionedFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionedFlow updateFlow(VersionedFlow body, String bucketId, String flowId) throws ApiException {
        ApiResponse<VersionedFlow> resp = updateFlowWithHttpInfo(body, bucketId, flowId);
        return resp.getData();
    }

    /**
     * Update bucket flow
     * Updates the flow with the given id in the given bucket.
     * @param body The updated flow (required)
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @return ApiResponse&lt;VersionedFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionedFlow> updateFlowWithHttpInfo(VersionedFlow body, String bucketId, String flowId) throws ApiException {
        com.squareup.okhttp.Call call = updateFlowValidateBeforeCall(body, bucketId, flowId, null, null);
        Type localVarReturnType = new TypeToken<VersionedFlow>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update bucket flow (asynchronously)
     * Updates the flow with the given id in the given bucket.
     * @param body The updated flow (required)
     * @param bucketId The bucket identifier (required)
     * @param flowId The flow identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFlowAsync(VersionedFlow body, String bucketId, String flowId, final ApiCallback<VersionedFlow> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFlowValidateBeforeCall(body, bucketId, flowId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionedFlow>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
