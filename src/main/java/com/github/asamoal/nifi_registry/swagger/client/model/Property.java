/*
 * Apache NiFi Registry REST API
 * The REST API provides an interface to a registry with operations for saving, versioning, reading NiFi flows and components.
 *
 * OpenAPI spec version: 1.19.1
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi_registry.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.github.asamoal.nifi_registry.swagger.client.model.AllowableValue;
import com.github.asamoal.nifi_registry.swagger.client.model.ControllerServiceDefinition;
import com.github.asamoal.nifi_registry.swagger.client.model.Dependency;
import com.github.asamoal.nifi_registry.swagger.client.model.ResourceDefinition;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Property
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-04-12T14:23:29.468928+02:00[Europe/Berlin]")
public class Property {
  @SerializedName("name")
  private String name = null;

  @SerializedName("displayName")
  private String displayName = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("defaultValue")
  private String defaultValue = null;

  @SerializedName("controllerServiceDefinition")
  private ControllerServiceDefinition controllerServiceDefinition = null;

  @SerializedName("allowableValues")
  private List<AllowableValue> allowableValues = null;

  @SerializedName("required")
  private Boolean required = null;

  @SerializedName("sensitive")
  private Boolean sensitive = null;

  @SerializedName("expressionLanguageSupported")
  private Boolean expressionLanguageSupported = null;

  /**
   * The scope of expression language support
   */
  @JsonAdapter(ExpressionLanguageScopeEnum.Adapter.class)
  public enum ExpressionLanguageScopeEnum {
    NONE("NONE"),
    VARIABLE_REGISTRY("VARIABLE_REGISTRY"),
    FLOWFILE_ATTRIBUTES("FLOWFILE_ATTRIBUTES");

    private String value;

    ExpressionLanguageScopeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ExpressionLanguageScopeEnum fromValue(String input) {
      for (ExpressionLanguageScopeEnum b : ExpressionLanguageScopeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ExpressionLanguageScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExpressionLanguageScopeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ExpressionLanguageScopeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ExpressionLanguageScopeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("expressionLanguageScope")
  private ExpressionLanguageScopeEnum expressionLanguageScope = null;

  @SerializedName("dynamicallyModifiesClasspath")
  private Boolean dynamicallyModifiesClasspath = null;

  @SerializedName("dynamic")
  private Boolean dynamic = null;

  @SerializedName("dependencies")
  private List<Dependency> dependencies = null;

  @SerializedName("resourceDefinition")
  private ResourceDefinition resourceDefinition = null;

  public Property name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the property
   * @return name
  **/
  @Schema(description = "The name of the property")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Property displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name
   * @return displayName
  **/
  @Schema(description = "The display name")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public Property description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The description
   * @return description
  **/
  @Schema(description = "The description")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Property defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * The default value
   * @return defaultValue
  **/
  @Schema(description = "The default value")
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }

  public Property controllerServiceDefinition(ControllerServiceDefinition controllerServiceDefinition) {
    this.controllerServiceDefinition = controllerServiceDefinition;
    return this;
  }

   /**
   * Get controllerServiceDefinition
   * @return controllerServiceDefinition
  **/
  @Schema(description = "")
  public ControllerServiceDefinition getControllerServiceDefinition() {
    return controllerServiceDefinition;
  }

  public void setControllerServiceDefinition(ControllerServiceDefinition controllerServiceDefinition) {
    this.controllerServiceDefinition = controllerServiceDefinition;
  }

  public Property allowableValues(List<AllowableValue> allowableValues) {
    this.allowableValues = allowableValues;
    return this;
  }

  public Property addAllowableValuesItem(AllowableValue allowableValuesItem) {
    if (this.allowableValues == null) {
      this.allowableValues = new ArrayList<AllowableValue>();
    }
    this.allowableValues.add(allowableValuesItem);
    return this;
  }

   /**
   * The allowable values for this property
   * @return allowableValues
  **/
  @Schema(description = "The allowable values for this property")
  public List<AllowableValue> getAllowableValues() {
    return allowableValues;
  }

  public void setAllowableValues(List<AllowableValue> allowableValues) {
    this.allowableValues = allowableValues;
  }

  public Property required(Boolean required) {
    this.required = required;
    return this;
  }

   /**
   * Whether or not the property is required
   * @return required
  **/
  @Schema(description = "Whether or not the property is required")
  public Boolean isRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }

  public Property sensitive(Boolean sensitive) {
    this.sensitive = sensitive;
    return this;
  }

   /**
   * Whether or not the property is sensitive
   * @return sensitive
  **/
  @Schema(description = "Whether or not the property is sensitive")
  public Boolean isSensitive() {
    return sensitive;
  }

  public void setSensitive(Boolean sensitive) {
    this.sensitive = sensitive;
  }

  public Property expressionLanguageSupported(Boolean expressionLanguageSupported) {
    this.expressionLanguageSupported = expressionLanguageSupported;
    return this;
  }

   /**
   * Whether or not expression language is supported
   * @return expressionLanguageSupported
  **/
  @Schema(description = "Whether or not expression language is supported")
  public Boolean isExpressionLanguageSupported() {
    return expressionLanguageSupported;
  }

  public void setExpressionLanguageSupported(Boolean expressionLanguageSupported) {
    this.expressionLanguageSupported = expressionLanguageSupported;
  }

  public Property expressionLanguageScope(ExpressionLanguageScopeEnum expressionLanguageScope) {
    this.expressionLanguageScope = expressionLanguageScope;
    return this;
  }

   /**
   * The scope of expression language support
   * @return expressionLanguageScope
  **/
  @Schema(description = "The scope of expression language support")
  public ExpressionLanguageScopeEnum getExpressionLanguageScope() {
    return expressionLanguageScope;
  }

  public void setExpressionLanguageScope(ExpressionLanguageScopeEnum expressionLanguageScope) {
    this.expressionLanguageScope = expressionLanguageScope;
  }

  public Property dynamicallyModifiesClasspath(Boolean dynamicallyModifiesClasspath) {
    this.dynamicallyModifiesClasspath = dynamicallyModifiesClasspath;
    return this;
  }

   /**
   * Whether or not the processor dynamically modifies the classpath
   * @return dynamicallyModifiesClasspath
  **/
  @Schema(description = "Whether or not the processor dynamically modifies the classpath")
  public Boolean isDynamicallyModifiesClasspath() {
    return dynamicallyModifiesClasspath;
  }

  public void setDynamicallyModifiesClasspath(Boolean dynamicallyModifiesClasspath) {
    this.dynamicallyModifiesClasspath = dynamicallyModifiesClasspath;
  }

  public Property dynamic(Boolean dynamic) {
    this.dynamic = dynamic;
    return this;
  }

   /**
   * Whether or not the processor is dynamic
   * @return dynamic
  **/
  @Schema(description = "Whether or not the processor is dynamic")
  public Boolean isDynamic() {
    return dynamic;
  }

  public void setDynamic(Boolean dynamic) {
    this.dynamic = dynamic;
  }

  public Property dependencies(List<Dependency> dependencies) {
    this.dependencies = dependencies;
    return this;
  }

  public Property addDependenciesItem(Dependency dependenciesItem) {
    if (this.dependencies == null) {
      this.dependencies = new ArrayList<Dependency>();
    }
    this.dependencies.add(dependenciesItem);
    return this;
  }

   /**
   * The properties that this property depends on
   * @return dependencies
  **/
  @Schema(description = "The properties that this property depends on")
  public List<Dependency> getDependencies() {
    return dependencies;
  }

  public void setDependencies(List<Dependency> dependencies) {
    this.dependencies = dependencies;
  }

  public Property resourceDefinition(ResourceDefinition resourceDefinition) {
    this.resourceDefinition = resourceDefinition;
    return this;
  }

   /**
   * Get resourceDefinition
   * @return resourceDefinition
  **/
  @Schema(description = "")
  public ResourceDefinition getResourceDefinition() {
    return resourceDefinition;
  }

  public void setResourceDefinition(ResourceDefinition resourceDefinition) {
    this.resourceDefinition = resourceDefinition;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Property property = (Property) o;
    return Objects.equals(this.name, property.name) &&
        Objects.equals(this.displayName, property.displayName) &&
        Objects.equals(this.description, property.description) &&
        Objects.equals(this.defaultValue, property.defaultValue) &&
        Objects.equals(this.controllerServiceDefinition, property.controllerServiceDefinition) &&
        Objects.equals(this.allowableValues, property.allowableValues) &&
        Objects.equals(this.required, property.required) &&
        Objects.equals(this.sensitive, property.sensitive) &&
        Objects.equals(this.expressionLanguageSupported, property.expressionLanguageSupported) &&
        Objects.equals(this.expressionLanguageScope, property.expressionLanguageScope) &&
        Objects.equals(this.dynamicallyModifiesClasspath, property.dynamicallyModifiesClasspath) &&
        Objects.equals(this.dynamic, property.dynamic) &&
        Objects.equals(this.dependencies, property.dependencies) &&
        Objects.equals(this.resourceDefinition, property.resourceDefinition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, displayName, description, defaultValue, controllerServiceDefinition, allowableValues, required, sensitive, expressionLanguageSupported, expressionLanguageScope, dynamicallyModifiesClasspath, dynamic, dependencies, resourceDefinition);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Property {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    controllerServiceDefinition: ").append(toIndentedString(controllerServiceDefinition)).append("\n");
    sb.append("    allowableValues: ").append(toIndentedString(allowableValues)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    sensitive: ").append(toIndentedString(sensitive)).append("\n");
    sb.append("    expressionLanguageSupported: ").append(toIndentedString(expressionLanguageSupported)).append("\n");
    sb.append("    expressionLanguageScope: ").append(toIndentedString(expressionLanguageScope)).append("\n");
    sb.append("    dynamicallyModifiesClasspath: ").append(toIndentedString(dynamicallyModifiesClasspath)).append("\n");
    sb.append("    dynamic: ").append(toIndentedString(dynamic)).append("\n");
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    resourceDefinition: ").append(toIndentedString(resourceDefinition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
