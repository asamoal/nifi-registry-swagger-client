/*
 * Apache NiFi Registry REST API
 * The REST API provides an interface to a registry with operations for saving, versioning, reading NiFi flows and components.
 *
 * OpenAPI spec version: 1.19.1
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi_registry.swagger.client;

import com.github.asamoal.nifi_registry.swagger.ApiCallback;
import com.github.asamoal.nifi_registry.swagger.ApiClient;
import com.github.asamoal.nifi_registry.swagger.ApiException;
import com.github.asamoal.nifi_registry.swagger.ApiResponse;
import com.github.asamoal.nifi_registry.swagger.Configuration;
import com.github.asamoal.nifi_registry.swagger.Pair;
import com.github.asamoal.nifi_registry.swagger.ProgressRequestBody;
import com.github.asamoal.nifi_registry.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.asamoal.nifi_registry.swagger.client.model.BundleVersion;
import com.github.asamoal.nifi_registry.swagger.client.model.ExtensionBundle;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BucketBundlesApi {
    private ApiClient apiClient;

    public BucketBundlesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BucketBundlesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createExtensionBundleVersion
     * @param bucketId The bucket identifier (required)
     * @param bundleType The type of the bundle (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createExtensionBundleVersionCall(String bucketId, String bundleType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/buckets/{bucketId}/bundles/{bundleType}"
            .replaceAll("\\{" + "bucketId" + "\\}", apiClient.escapeString(bucketId.toString()))
            .replaceAll("\\{" + "bundleType" + "\\}", apiClient.escapeString(bundleType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createExtensionBundleVersionValidateBeforeCall(String bucketId, String bundleType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling createExtensionBundleVersion(Async)");
        }
        // verify the required parameter 'bundleType' is set
        if (bundleType == null) {
            throw new ApiException("Missing the required parameter 'bundleType' when calling createExtensionBundleVersion(Async)");
        }
        
        com.squareup.okhttp.Call call = createExtensionBundleVersionCall(bucketId, bundleType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create extension bundle version
     * Creates a version of an extension bundle by uploading a binary artifact. If an extension bundle already exists in the given bucket with the same group id and artifact id as that of the bundle being uploaded, then it will be added as a new version to the existing bundle. If an extension bundle does not already exist in the given bucket with the same group id and artifact id, then a new extension bundle will be created and this version will be added to the new bundle. Client&#x27;s may optionally supply a SHA-256 in hex format through the multi-part form field &#x27;sha256&#x27;. If supplied, then this value will be compared against the SHA-256 computed by the server, and the bundle will be rejected if the values do not match. If not supplied, the bundle will be accepted, but will be marked to indicate that the client did not supply a SHA-256 during creation.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketId The bucket identifier (required)
     * @param bundleType The type of the bundle (required)
     * @return BundleVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BundleVersion createExtensionBundleVersion(String bucketId, String bundleType) throws ApiException {
        ApiResponse<BundleVersion> resp = createExtensionBundleVersionWithHttpInfo(bucketId, bundleType);
        return resp.getData();
    }

    /**
     * Create extension bundle version
     * Creates a version of an extension bundle by uploading a binary artifact. If an extension bundle already exists in the given bucket with the same group id and artifact id as that of the bundle being uploaded, then it will be added as a new version to the existing bundle. If an extension bundle does not already exist in the given bucket with the same group id and artifact id, then a new extension bundle will be created and this version will be added to the new bundle. Client&#x27;s may optionally supply a SHA-256 in hex format through the multi-part form field &#x27;sha256&#x27;. If supplied, then this value will be compared against the SHA-256 computed by the server, and the bundle will be rejected if the values do not match. If not supplied, the bundle will be accepted, but will be marked to indicate that the client did not supply a SHA-256 during creation.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketId The bucket identifier (required)
     * @param bundleType The type of the bundle (required)
     * @return ApiResponse&lt;BundleVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BundleVersion> createExtensionBundleVersionWithHttpInfo(String bucketId, String bundleType) throws ApiException {
        com.squareup.okhttp.Call call = createExtensionBundleVersionValidateBeforeCall(bucketId, bundleType, null, null);
        Type localVarReturnType = new TypeToken<BundleVersion>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create extension bundle version (asynchronously)
     * Creates a version of an extension bundle by uploading a binary artifact. If an extension bundle already exists in the given bucket with the same group id and artifact id as that of the bundle being uploaded, then it will be added as a new version to the existing bundle. If an extension bundle does not already exist in the given bucket with the same group id and artifact id, then a new extension bundle will be created and this version will be added to the new bundle. Client&#x27;s may optionally supply a SHA-256 in hex format through the multi-part form field &#x27;sha256&#x27;. If supplied, then this value will be compared against the SHA-256 computed by the server, and the bundle will be rejected if the values do not match. If not supplied, the bundle will be accepted, but will be marked to indicate that the client did not supply a SHA-256 during creation.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketId The bucket identifier (required)
     * @param bundleType The type of the bundle (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createExtensionBundleVersionAsync(String bucketId, String bundleType, final ApiCallback<BundleVersion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createExtensionBundleVersionValidateBeforeCall(bucketId, bundleType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BundleVersion>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExtensionBundles
     * @param bucketId The bucket identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExtensionBundlesCall(String bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/buckets/{bucketId}/bundles"
            .replaceAll("\\{" + "bucketId" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExtensionBundlesValidateBeforeCall(String bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling getExtensionBundles(Async)");
        }
        
        com.squareup.okhttp.Call call = getExtensionBundlesCall(bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get extension bundles by bucket
     *   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketId The bucket identifier (required)
     * @return List&lt;ExtensionBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ExtensionBundle> getExtensionBundles(String bucketId) throws ApiException {
        ApiResponse<List<ExtensionBundle>> resp = getExtensionBundlesWithHttpInfo(bucketId);
        return resp.getData();
    }

    /**
     * Get extension bundles by bucket
     *   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketId The bucket identifier (required)
     * @return ApiResponse&lt;List&lt;ExtensionBundle&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ExtensionBundle>> getExtensionBundlesWithHttpInfo(String bucketId) throws ApiException {
        com.squareup.okhttp.Call call = getExtensionBundlesValidateBeforeCall(bucketId, null, null);
        Type localVarReturnType = new TypeToken<List<ExtensionBundle>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get extension bundles by bucket (asynchronously)
     *   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketId The bucket identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExtensionBundlesAsync(String bucketId, final ApiCallback<List<ExtensionBundle>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExtensionBundlesValidateBeforeCall(bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ExtensionBundle>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
