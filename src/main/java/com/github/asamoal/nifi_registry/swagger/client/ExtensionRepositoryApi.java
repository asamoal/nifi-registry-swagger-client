/*
 * Apache NiFi Registry REST API
 * The REST API provides an interface to a registry with operations for saving, versioning, reading NiFi flows and components.
 *
 * OpenAPI spec version: 1.19.1
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi_registry.swagger.client;

import com.github.asamoal.nifi_registry.swagger.ApiCallback;
import com.github.asamoal.nifi_registry.swagger.ApiClient;
import com.github.asamoal.nifi_registry.swagger.ApiException;
import com.github.asamoal.nifi_registry.swagger.ApiResponse;
import com.github.asamoal.nifi_registry.swagger.Configuration;
import com.github.asamoal.nifi_registry.swagger.Pair;
import com.github.asamoal.nifi_registry.swagger.ProgressRequestBody;
import com.github.asamoal.nifi_registry.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.asamoal.nifi_registry.swagger.client.model.Extension;
import com.github.asamoal.nifi_registry.swagger.client.model.ExtensionMetadata;
import com.github.asamoal.nifi_registry.swagger.client.model.ExtensionRepoArtifact;
import com.github.asamoal.nifi_registry.swagger.client.model.ExtensionRepoBucket;
import com.github.asamoal.nifi_registry.swagger.client.model.ExtensionRepoGroup;
import com.github.asamoal.nifi_registry.swagger.client.model.ExtensionRepoVersion;
import com.github.asamoal.nifi_registry.swagger.client.model.ExtensionRepoVersionSummary;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExtensionRepositoryApi {
    private ApiClient apiClient;

    public ExtensionRepositoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExtensionRepositoryApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getExtensionRepoArtifacts
     * @param bucketName The bucket name (required)
     * @param groupId The group id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExtensionRepoArtifactsCall(String bucketName, String groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/extension-repository/{bucketName}/{groupId}"
            .replaceAll("\\{" + "bucketName" + "\\}", apiClient.escapeString(bucketName.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExtensionRepoArtifactsValidateBeforeCall(String bucketName, String groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketName' is set
        if (bucketName == null) {
            throw new ApiException("Missing the required parameter 'bucketName' when calling getExtensionRepoArtifacts(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getExtensionRepoArtifacts(Async)");
        }
        
        com.squareup.okhttp.Call call = getExtensionRepoArtifactsCall(bucketName, groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get extension repo artifacts
     * Gets the artifacts in the extension repository in the given bucket and group.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group id (required)
     * @return List&lt;ExtensionRepoArtifact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ExtensionRepoArtifact> getExtensionRepoArtifacts(String bucketName, String groupId) throws ApiException {
        ApiResponse<List<ExtensionRepoArtifact>> resp = getExtensionRepoArtifactsWithHttpInfo(bucketName, groupId);
        return resp.getData();
    }

    /**
     * Get extension repo artifacts
     * Gets the artifacts in the extension repository in the given bucket and group.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group id (required)
     * @return ApiResponse&lt;List&lt;ExtensionRepoArtifact&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ExtensionRepoArtifact>> getExtensionRepoArtifactsWithHttpInfo(String bucketName, String groupId) throws ApiException {
        com.squareup.okhttp.Call call = getExtensionRepoArtifactsValidateBeforeCall(bucketName, groupId, null, null);
        Type localVarReturnType = new TypeToken<List<ExtensionRepoArtifact>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get extension repo artifacts (asynchronously)
     * Gets the artifacts in the extension repository in the given bucket and group.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExtensionRepoArtifactsAsync(String bucketName, String groupId, final ApiCallback<List<ExtensionRepoArtifact>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExtensionRepoArtifactsValidateBeforeCall(bucketName, groupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ExtensionRepoArtifact>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExtensionRepoBuckets
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExtensionRepoBucketsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/extension-repository";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExtensionRepoBucketsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getExtensionRepoBucketsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get extension repo buckets
     * Gets the names of the buckets the current user is authorized for in order to browse the repo by bucket.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @return List&lt;ExtensionRepoBucket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ExtensionRepoBucket> getExtensionRepoBuckets() throws ApiException {
        ApiResponse<List<ExtensionRepoBucket>> resp = getExtensionRepoBucketsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get extension repo buckets
     * Gets the names of the buckets the current user is authorized for in order to browse the repo by bucket.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @return ApiResponse&lt;List&lt;ExtensionRepoBucket&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ExtensionRepoBucket>> getExtensionRepoBucketsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getExtensionRepoBucketsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<ExtensionRepoBucket>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get extension repo buckets (asynchronously)
     * Gets the names of the buckets the current user is authorized for in order to browse the repo by bucket.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExtensionRepoBucketsAsync(final ApiCallback<List<ExtensionRepoBucket>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExtensionRepoBucketsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ExtensionRepoBucket>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExtensionRepoGroups
     * @param bucketName The bucket name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExtensionRepoGroupsCall(String bucketName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/extension-repository/{bucketName}"
            .replaceAll("\\{" + "bucketName" + "\\}", apiClient.escapeString(bucketName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExtensionRepoGroupsValidateBeforeCall(String bucketName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketName' is set
        if (bucketName == null) {
            throw new ApiException("Missing the required parameter 'bucketName' when calling getExtensionRepoGroups(Async)");
        }
        
        com.squareup.okhttp.Call call = getExtensionRepoGroupsCall(bucketName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get extension repo groups
     * Gets the groups in the extension repository in the given bucket.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @return List&lt;ExtensionRepoGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ExtensionRepoGroup> getExtensionRepoGroups(String bucketName) throws ApiException {
        ApiResponse<List<ExtensionRepoGroup>> resp = getExtensionRepoGroupsWithHttpInfo(bucketName);
        return resp.getData();
    }

    /**
     * Get extension repo groups
     * Gets the groups in the extension repository in the given bucket.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @return ApiResponse&lt;List&lt;ExtensionRepoGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ExtensionRepoGroup>> getExtensionRepoGroupsWithHttpInfo(String bucketName) throws ApiException {
        com.squareup.okhttp.Call call = getExtensionRepoGroupsValidateBeforeCall(bucketName, null, null);
        Type localVarReturnType = new TypeToken<List<ExtensionRepoGroup>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get extension repo groups (asynchronously)
     * Gets the groups in the extension repository in the given bucket.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExtensionRepoGroupsAsync(String bucketName, final ApiCallback<List<ExtensionRepoGroup>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExtensionRepoGroupsValidateBeforeCall(bucketName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ExtensionRepoGroup>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExtensionRepoVersion
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExtensionRepoVersionCall(String bucketName, String groupId, String artifactId, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/extension-repository/{bucketName}/{groupId}/{artifactId}/{version}"
            .replaceAll("\\{" + "bucketName" + "\\}", apiClient.escapeString(bucketName.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()))
            .replaceAll("\\{" + "artifactId" + "\\}", apiClient.escapeString(artifactId.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExtensionRepoVersionValidateBeforeCall(String bucketName, String groupId, String artifactId, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketName' is set
        if (bucketName == null) {
            throw new ApiException("Missing the required parameter 'bucketName' when calling getExtensionRepoVersion(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getExtensionRepoVersion(Async)");
        }
        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling getExtensionRepoVersion(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getExtensionRepoVersion(Async)");
        }
        
        com.squareup.okhttp.Call call = getExtensionRepoVersionCall(bucketName, groupId, artifactId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get extension repo version
     * Gets information about the version in the given bucket, group, and artifact.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @return ExtensionRepoVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExtensionRepoVersion getExtensionRepoVersion(String bucketName, String groupId, String artifactId, String version) throws ApiException {
        ApiResponse<ExtensionRepoVersion> resp = getExtensionRepoVersionWithHttpInfo(bucketName, groupId, artifactId, version);
        return resp.getData();
    }

    /**
     * Get extension repo version
     * Gets information about the version in the given bucket, group, and artifact.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @return ApiResponse&lt;ExtensionRepoVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExtensionRepoVersion> getExtensionRepoVersionWithHttpInfo(String bucketName, String groupId, String artifactId, String version) throws ApiException {
        com.squareup.okhttp.Call call = getExtensionRepoVersionValidateBeforeCall(bucketName, groupId, artifactId, version, null, null);
        Type localVarReturnType = new TypeToken<ExtensionRepoVersion>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get extension repo version (asynchronously)
     * Gets information about the version in the given bucket, group, and artifact.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExtensionRepoVersionAsync(String bucketName, String groupId, String artifactId, String version, final ApiCallback<ExtensionRepoVersion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExtensionRepoVersionValidateBeforeCall(bucketName, groupId, artifactId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExtensionRepoVersion>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExtensionRepoVersionContent
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExtensionRepoVersionContentCall(String bucketName, String groupId, String artifactId, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/content"
            .replaceAll("\\{" + "bucketName" + "\\}", apiClient.escapeString(bucketName.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()))
            .replaceAll("\\{" + "artifactId" + "\\}", apiClient.escapeString(artifactId.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExtensionRepoVersionContentValidateBeforeCall(String bucketName, String groupId, String artifactId, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketName' is set
        if (bucketName == null) {
            throw new ApiException("Missing the required parameter 'bucketName' when calling getExtensionRepoVersionContent(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getExtensionRepoVersionContent(Async)");
        }
        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling getExtensionRepoVersionContent(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getExtensionRepoVersionContent(Async)");
        }
        
        com.squareup.okhttp.Call call = getExtensionRepoVersionContentCall(bucketName, groupId, artifactId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get extension repo version content
     * Gets the binary content of the bundle with the given bucket, group, artifact, and version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @return List&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<byte[]> getExtensionRepoVersionContent(String bucketName, String groupId, String artifactId, String version) throws ApiException {
        ApiResponse<List<byte[]>> resp = getExtensionRepoVersionContentWithHttpInfo(bucketName, groupId, artifactId, version);
        return resp.getData();
    }

    /**
     * Get extension repo version content
     * Gets the binary content of the bundle with the given bucket, group, artifact, and version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @return ApiResponse&lt;List&lt;byte[]&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<byte[]>> getExtensionRepoVersionContentWithHttpInfo(String bucketName, String groupId, String artifactId, String version) throws ApiException {
        com.squareup.okhttp.Call call = getExtensionRepoVersionContentValidateBeforeCall(bucketName, groupId, artifactId, version, null, null);
        Type localVarReturnType = new TypeToken<List<byte[]>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get extension repo version content (asynchronously)
     * Gets the binary content of the bundle with the given bucket, group, artifact, and version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExtensionRepoVersionContentAsync(String bucketName, String groupId, String artifactId, String version, final ApiCallback<List<byte[]>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExtensionRepoVersionContentValidateBeforeCall(bucketName, groupId, artifactId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<byte[]>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExtensionRepoVersionExtension
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @param name The fully qualified name of the extension (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExtensionRepoVersionExtensionCall(String bucketName, String groupId, String artifactId, String version, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/extensions/{name}"
            .replaceAll("\\{" + "bucketName" + "\\}", apiClient.escapeString(bucketName.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()))
            .replaceAll("\\{" + "artifactId" + "\\}", apiClient.escapeString(artifactId.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExtensionRepoVersionExtensionValidateBeforeCall(String bucketName, String groupId, String artifactId, String version, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketName' is set
        if (bucketName == null) {
            throw new ApiException("Missing the required parameter 'bucketName' when calling getExtensionRepoVersionExtension(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getExtensionRepoVersionExtension(Async)");
        }
        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling getExtensionRepoVersionExtension(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getExtensionRepoVersionExtension(Async)");
        }
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getExtensionRepoVersionExtension(Async)");
        }
        
        com.squareup.okhttp.Call call = getExtensionRepoVersionExtensionCall(bucketName, groupId, artifactId, version, name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get extension repo extension
     * Gets information about the extension with the given name in the given bucket, group, artifact, and version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @param name The fully qualified name of the extension (required)
     * @return Extension
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Extension getExtensionRepoVersionExtension(String bucketName, String groupId, String artifactId, String version, String name) throws ApiException {
        ApiResponse<Extension> resp = getExtensionRepoVersionExtensionWithHttpInfo(bucketName, groupId, artifactId, version, name);
        return resp.getData();
    }

    /**
     * Get extension repo extension
     * Gets information about the extension with the given name in the given bucket, group, artifact, and version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @param name The fully qualified name of the extension (required)
     * @return ApiResponse&lt;Extension&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Extension> getExtensionRepoVersionExtensionWithHttpInfo(String bucketName, String groupId, String artifactId, String version, String name) throws ApiException {
        com.squareup.okhttp.Call call = getExtensionRepoVersionExtensionValidateBeforeCall(bucketName, groupId, artifactId, version, name, null, null);
        Type localVarReturnType = new TypeToken<Extension>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get extension repo extension (asynchronously)
     * Gets information about the extension with the given name in the given bucket, group, artifact, and version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @param name The fully qualified name of the extension (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExtensionRepoVersionExtensionAsync(String bucketName, String groupId, String artifactId, String version, String name, final ApiCallback<Extension> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExtensionRepoVersionExtensionValidateBeforeCall(bucketName, groupId, artifactId, version, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Extension>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExtensionRepoVersionExtensionAdditionalDetailsDocs
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @param name The fully qualified name of the extension (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExtensionRepoVersionExtensionAdditionalDetailsDocsCall(String bucketName, String groupId, String artifactId, String version, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/extensions/{name}/docs/additional-details"
            .replaceAll("\\{" + "bucketName" + "\\}", apiClient.escapeString(bucketName.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()))
            .replaceAll("\\{" + "artifactId" + "\\}", apiClient.escapeString(artifactId.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExtensionRepoVersionExtensionAdditionalDetailsDocsValidateBeforeCall(String bucketName, String groupId, String artifactId, String version, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketName' is set
        if (bucketName == null) {
            throw new ApiException("Missing the required parameter 'bucketName' when calling getExtensionRepoVersionExtensionAdditionalDetailsDocs(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getExtensionRepoVersionExtensionAdditionalDetailsDocs(Async)");
        }
        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling getExtensionRepoVersionExtensionAdditionalDetailsDocs(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getExtensionRepoVersionExtensionAdditionalDetailsDocs(Async)");
        }
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getExtensionRepoVersionExtensionAdditionalDetailsDocs(Async)");
        }
        
        com.squareup.okhttp.Call call = getExtensionRepoVersionExtensionAdditionalDetailsDocsCall(bucketName, groupId, artifactId, version, name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get extension repo extension details
     * Gets the additional details documentation for the extension with the given name in the given bucket, group, artifact, and version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @param name The fully qualified name of the extension (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getExtensionRepoVersionExtensionAdditionalDetailsDocs(String bucketName, String groupId, String artifactId, String version, String name) throws ApiException {
        ApiResponse<String> resp = getExtensionRepoVersionExtensionAdditionalDetailsDocsWithHttpInfo(bucketName, groupId, artifactId, version, name);
        return resp.getData();
    }

    /**
     * Get extension repo extension details
     * Gets the additional details documentation for the extension with the given name in the given bucket, group, artifact, and version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @param name The fully qualified name of the extension (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getExtensionRepoVersionExtensionAdditionalDetailsDocsWithHttpInfo(String bucketName, String groupId, String artifactId, String version, String name) throws ApiException {
        com.squareup.okhttp.Call call = getExtensionRepoVersionExtensionAdditionalDetailsDocsValidateBeforeCall(bucketName, groupId, artifactId, version, name, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get extension repo extension details (asynchronously)
     * Gets the additional details documentation for the extension with the given name in the given bucket, group, artifact, and version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @param name The fully qualified name of the extension (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExtensionRepoVersionExtensionAdditionalDetailsDocsAsync(String bucketName, String groupId, String artifactId, String version, String name, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExtensionRepoVersionExtensionAdditionalDetailsDocsValidateBeforeCall(bucketName, groupId, artifactId, version, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExtensionRepoVersionExtensionDocs
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @param name The fully qualified name of the extension (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExtensionRepoVersionExtensionDocsCall(String bucketName, String groupId, String artifactId, String version, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/extensions/{name}/docs"
            .replaceAll("\\{" + "bucketName" + "\\}", apiClient.escapeString(bucketName.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()))
            .replaceAll("\\{" + "artifactId" + "\\}", apiClient.escapeString(artifactId.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExtensionRepoVersionExtensionDocsValidateBeforeCall(String bucketName, String groupId, String artifactId, String version, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketName' is set
        if (bucketName == null) {
            throw new ApiException("Missing the required parameter 'bucketName' when calling getExtensionRepoVersionExtensionDocs(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getExtensionRepoVersionExtensionDocs(Async)");
        }
        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling getExtensionRepoVersionExtensionDocs(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getExtensionRepoVersionExtensionDocs(Async)");
        }
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getExtensionRepoVersionExtensionDocs(Async)");
        }
        
        com.squareup.okhttp.Call call = getExtensionRepoVersionExtensionDocsCall(bucketName, groupId, artifactId, version, name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get extension repo extension docs
     * Gets the documentation for the extension with the given name in the given bucket, group, artifact, and version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @param name The fully qualified name of the extension (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getExtensionRepoVersionExtensionDocs(String bucketName, String groupId, String artifactId, String version, String name) throws ApiException {
        ApiResponse<String> resp = getExtensionRepoVersionExtensionDocsWithHttpInfo(bucketName, groupId, artifactId, version, name);
        return resp.getData();
    }

    /**
     * Get extension repo extension docs
     * Gets the documentation for the extension with the given name in the given bucket, group, artifact, and version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @param name The fully qualified name of the extension (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getExtensionRepoVersionExtensionDocsWithHttpInfo(String bucketName, String groupId, String artifactId, String version, String name) throws ApiException {
        com.squareup.okhttp.Call call = getExtensionRepoVersionExtensionDocsValidateBeforeCall(bucketName, groupId, artifactId, version, name, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get extension repo extension docs (asynchronously)
     * Gets the documentation for the extension with the given name in the given bucket, group, artifact, and version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @param name The fully qualified name of the extension (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExtensionRepoVersionExtensionDocsAsync(String bucketName, String groupId, String artifactId, String version, String name, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExtensionRepoVersionExtensionDocsValidateBeforeCall(bucketName, groupId, artifactId, version, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExtensionRepoVersionExtensions
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExtensionRepoVersionExtensionsCall(String bucketName, String groupId, String artifactId, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/extensions"
            .replaceAll("\\{" + "bucketName" + "\\}", apiClient.escapeString(bucketName.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()))
            .replaceAll("\\{" + "artifactId" + "\\}", apiClient.escapeString(artifactId.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExtensionRepoVersionExtensionsValidateBeforeCall(String bucketName, String groupId, String artifactId, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketName' is set
        if (bucketName == null) {
            throw new ApiException("Missing the required parameter 'bucketName' when calling getExtensionRepoVersionExtensions(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getExtensionRepoVersionExtensions(Async)");
        }
        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling getExtensionRepoVersionExtensions(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getExtensionRepoVersionExtensions(Async)");
        }
        
        com.squareup.okhttp.Call call = getExtensionRepoVersionExtensionsCall(bucketName, groupId, artifactId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get extension repo extensions
     * Gets information about the extensions in the given bucket, group, artifact, and version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @return List&lt;ExtensionMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ExtensionMetadata> getExtensionRepoVersionExtensions(String bucketName, String groupId, String artifactId, String version) throws ApiException {
        ApiResponse<List<ExtensionMetadata>> resp = getExtensionRepoVersionExtensionsWithHttpInfo(bucketName, groupId, artifactId, version);
        return resp.getData();
    }

    /**
     * Get extension repo extensions
     * Gets information about the extensions in the given bucket, group, artifact, and version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @return ApiResponse&lt;List&lt;ExtensionMetadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ExtensionMetadata>> getExtensionRepoVersionExtensionsWithHttpInfo(String bucketName, String groupId, String artifactId, String version) throws ApiException {
        com.squareup.okhttp.Call call = getExtensionRepoVersionExtensionsValidateBeforeCall(bucketName, groupId, artifactId, version, null, null);
        Type localVarReturnType = new TypeToken<List<ExtensionMetadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get extension repo extensions (asynchronously)
     * Gets information about the extensions in the given bucket, group, artifact, and version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExtensionRepoVersionExtensionsAsync(String bucketName, String groupId, String artifactId, String version, final ApiCallback<List<ExtensionMetadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExtensionRepoVersionExtensionsValidateBeforeCall(bucketName, groupId, artifactId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ExtensionMetadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExtensionRepoVersionSha256
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExtensionRepoVersionSha256Call(String bucketName, String groupId, String artifactId, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/extension-repository/{bucketName}/{groupId}/{artifactId}/{version}/sha256"
            .replaceAll("\\{" + "bucketName" + "\\}", apiClient.escapeString(bucketName.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()))
            .replaceAll("\\{" + "artifactId" + "\\}", apiClient.escapeString(artifactId.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExtensionRepoVersionSha256ValidateBeforeCall(String bucketName, String groupId, String artifactId, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketName' is set
        if (bucketName == null) {
            throw new ApiException("Missing the required parameter 'bucketName' when calling getExtensionRepoVersionSha256(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getExtensionRepoVersionSha256(Async)");
        }
        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling getExtensionRepoVersionSha256(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getExtensionRepoVersionSha256(Async)");
        }
        
        com.squareup.okhttp.Call call = getExtensionRepoVersionSha256Call(bucketName, groupId, artifactId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get extension repo version checksum
     * Gets the hex representation of the SHA-256 digest for the binary content of the bundle with the given bucket, group, artifact, and version.  NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getExtensionRepoVersionSha256(String bucketName, String groupId, String artifactId, String version) throws ApiException {
        ApiResponse<String> resp = getExtensionRepoVersionSha256WithHttpInfo(bucketName, groupId, artifactId, version);
        return resp.getData();
    }

    /**
     * Get extension repo version checksum
     * Gets the hex representation of the SHA-256 digest for the binary content of the bundle with the given bucket, group, artifact, and version.  NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getExtensionRepoVersionSha256WithHttpInfo(String bucketName, String groupId, String artifactId, String version) throws ApiException {
        com.squareup.okhttp.Call call = getExtensionRepoVersionSha256ValidateBeforeCall(bucketName, groupId, artifactId, version, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get extension repo version checksum (asynchronously)
     * Gets the hex representation of the SHA-256 digest for the binary content of the bundle with the given bucket, group, artifact, and version.  NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExtensionRepoVersionSha256Async(String bucketName, String groupId, String artifactId, String version, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExtensionRepoVersionSha256ValidateBeforeCall(bucketName, groupId, artifactId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExtensionRepoVersions
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExtensionRepoVersionsCall(String bucketName, String groupId, String artifactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/extension-repository/{bucketName}/{groupId}/{artifactId}"
            .replaceAll("\\{" + "bucketName" + "\\}", apiClient.escapeString(bucketName.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()))
            .replaceAll("\\{" + "artifactId" + "\\}", apiClient.escapeString(artifactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExtensionRepoVersionsValidateBeforeCall(String bucketName, String groupId, String artifactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bucketName' is set
        if (bucketName == null) {
            throw new ApiException("Missing the required parameter 'bucketName' when calling getExtensionRepoVersions(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getExtensionRepoVersions(Async)");
        }
        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling getExtensionRepoVersions(Async)");
        }
        
        com.squareup.okhttp.Call call = getExtensionRepoVersionsCall(bucketName, groupId, artifactId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get extension repo versions
     * Gets the versions in the extension repository for the given bucket, group, and artifact.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @return List&lt;ExtensionRepoVersionSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ExtensionRepoVersionSummary> getExtensionRepoVersions(String bucketName, String groupId, String artifactId) throws ApiException {
        ApiResponse<List<ExtensionRepoVersionSummary>> resp = getExtensionRepoVersionsWithHttpInfo(bucketName, groupId, artifactId);
        return resp.getData();
    }

    /**
     * Get extension repo versions
     * Gets the versions in the extension repository for the given bucket, group, and artifact.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @return ApiResponse&lt;List&lt;ExtensionRepoVersionSummary&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ExtensionRepoVersionSummary>> getExtensionRepoVersionsWithHttpInfo(String bucketName, String groupId, String artifactId) throws ApiException {
        com.squareup.okhttp.Call call = getExtensionRepoVersionsValidateBeforeCall(bucketName, groupId, artifactId, null, null);
        Type localVarReturnType = new TypeToken<List<ExtensionRepoVersionSummary>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get extension repo versions (asynchronously)
     * Gets the versions in the extension repository for the given bucket, group, and artifact.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName The bucket name (required)
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExtensionRepoVersionsAsync(String bucketName, String groupId, String artifactId, final ApiCallback<List<ExtensionRepoVersionSummary>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExtensionRepoVersionsValidateBeforeCall(bucketName, groupId, artifactId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ExtensionRepoVersionSummary>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGlobalExtensionRepoVersionSha256
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGlobalExtensionRepoVersionSha256Call(String groupId, String artifactId, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/extension-repository/{groupId}/{artifactId}/{version}/sha256"
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()))
            .replaceAll("\\{" + "artifactId" + "\\}", apiClient.escapeString(artifactId.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGlobalExtensionRepoVersionSha256ValidateBeforeCall(String groupId, String artifactId, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGlobalExtensionRepoVersionSha256(Async)");
        }
        // verify the required parameter 'artifactId' is set
        if (artifactId == null) {
            throw new ApiException("Missing the required parameter 'artifactId' when calling getGlobalExtensionRepoVersionSha256(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getGlobalExtensionRepoVersionSha256(Async)");
        }
        
        com.squareup.okhttp.Call call = getGlobalExtensionRepoVersionSha256Call(groupId, artifactId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get global extension repo version checksum
     * Gets the hex representation of the SHA-256 digest for the binary content with the given bucket, group, artifact, and version. Since the same group-artifact-version can exist in multiple buckets, this will return the checksum of the first one returned. This will be consistent since the checksum must be the same when existing in multiple buckets.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getGlobalExtensionRepoVersionSha256(String groupId, String artifactId, String version) throws ApiException {
        ApiResponse<String> resp = getGlobalExtensionRepoVersionSha256WithHttpInfo(groupId, artifactId, version);
        return resp.getData();
    }

    /**
     * Get global extension repo version checksum
     * Gets the hex representation of the SHA-256 digest for the binary content with the given bucket, group, artifact, and version. Since the same group-artifact-version can exist in multiple buckets, this will return the checksum of the first one returned. This will be consistent since the checksum must be the same when existing in multiple buckets.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getGlobalExtensionRepoVersionSha256WithHttpInfo(String groupId, String artifactId, String version) throws ApiException {
        com.squareup.okhttp.Call call = getGlobalExtensionRepoVersionSha256ValidateBeforeCall(groupId, artifactId, version, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get global extension repo version checksum (asynchronously)
     * Gets the hex representation of the SHA-256 digest for the binary content with the given bucket, group, artifact, and version. Since the same group-artifact-version can exist in multiple buckets, this will return the checksum of the first one returned. This will be consistent since the checksum must be the same when existing in multiple buckets.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param groupId The group identifier (required)
     * @param artifactId The artifact identifier (required)
     * @param version The version (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGlobalExtensionRepoVersionSha256Async(String groupId, String artifactId, String version, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGlobalExtensionRepoVersionSha256ValidateBeforeCall(groupId, artifactId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
