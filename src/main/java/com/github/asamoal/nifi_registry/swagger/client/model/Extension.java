/*
 * Apache NiFi Registry REST API
 * The REST API provides an interface to a registry with operations for saving, versioning, reading NiFi flows and components.
 *
 * OpenAPI spec version: 1.20.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi_registry.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.github.asamoal.nifi_registry.swagger.client.model.Attribute;
import com.github.asamoal.nifi_registry.swagger.client.model.DefaultSchedule;
import com.github.asamoal.nifi_registry.swagger.client.model.DefaultSettings;
import com.github.asamoal.nifi_registry.swagger.client.model.DeprecationNotice;
import com.github.asamoal.nifi_registry.swagger.client.model.DynamicProperty;
import com.github.asamoal.nifi_registry.swagger.client.model.DynamicRelationship;
import com.github.asamoal.nifi_registry.swagger.client.model.Property;
import com.github.asamoal.nifi_registry.swagger.client.model.ProvidedServiceAPI;
import com.github.asamoal.nifi_registry.swagger.client.model.Relationship;
import com.github.asamoal.nifi_registry.swagger.client.model.Restricted;
import com.github.asamoal.nifi_registry.swagger.client.model.Stateful;
import com.github.asamoal.nifi_registry.swagger.client.model.SystemResourceConsideration;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Extension
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-04-12T16:35:44.644520+02:00[Europe/Berlin]")
public class Extension {
  @SerializedName("name")
  private String name = null;

  /**
   * The type of the extension
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PROCESSOR("PROCESSOR"),
    CONTROLLER_SERVICE("CONTROLLER_SERVICE"),
    REPORTING_TASK("REPORTING_TASK");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("deprecationNotice")
  private DeprecationNotice deprecationNotice = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("tags")
  private List<String> tags = null;

  @SerializedName("properties")
  private List<Property> properties = null;

  @SerializedName("dynamicProperties")
  private List<DynamicProperty> dynamicProperties = null;

  @SerializedName("relationships")
  private List<Relationship> relationships = null;

  @SerializedName("dynamicRelationship")
  private DynamicRelationship dynamicRelationship = null;

  @SerializedName("readsAttributes")
  private List<Attribute> readsAttributes = null;

  @SerializedName("writesAttributes")
  private List<Attribute> writesAttributes = null;

  @SerializedName("stateful")
  private Stateful stateful = null;

  @SerializedName("restricted")
  private Restricted restricted = null;

  /**
   * The input requirement of the extension
   */
  @JsonAdapter(InputRequirementEnum.Adapter.class)
  public enum InputRequirementEnum {
    REQUIRED("INPUT_REQUIRED"),
    ALLOWED("INPUT_ALLOWED"),
    FORBIDDEN("INPUT_FORBIDDEN");

    private String value;

    InputRequirementEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static InputRequirementEnum fromValue(String input) {
      for (InputRequirementEnum b : InputRequirementEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<InputRequirementEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InputRequirementEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public InputRequirementEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return InputRequirementEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("inputRequirement")
  private InputRequirementEnum inputRequirement = null;

  @SerializedName("systemResourceConsiderations")
  private List<SystemResourceConsideration> systemResourceConsiderations = null;

  @SerializedName("seeAlso")
  private List<String> seeAlso = null;

  @SerializedName("providedServiceAPIs")
  private List<ProvidedServiceAPI> providedServiceAPIs = null;

  @SerializedName("defaultSettings")
  private DefaultSettings defaultSettings = null;

  @SerializedName("defaultSchedule")
  private DefaultSchedule defaultSchedule = null;

  @SerializedName("triggerSerially")
  private Boolean triggerSerially = null;

  @SerializedName("triggerWhenEmpty")
  private Boolean triggerWhenEmpty = null;

  @SerializedName("triggerWhenAnyDestinationAvailable")
  private Boolean triggerWhenAnyDestinationAvailable = null;

  @SerializedName("supportsBatching")
  private Boolean supportsBatching = null;

  @SerializedName("eventDriven")
  private Boolean eventDriven = null;

  @SerializedName("primaryNodeOnly")
  private Boolean primaryNodeOnly = null;

  @SerializedName("sideEffectFree")
  private Boolean sideEffectFree = null;

  public Extension name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the extension
   * @return name
  **/
  @Schema(description = "The name of the extension")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Extension type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the extension
   * @return type
  **/
  @Schema(description = "The type of the extension")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Extension deprecationNotice(DeprecationNotice deprecationNotice) {
    this.deprecationNotice = deprecationNotice;
    return this;
  }

   /**
   * Get deprecationNotice
   * @return deprecationNotice
  **/
  @Schema(description = "")
  public DeprecationNotice getDeprecationNotice() {
    return deprecationNotice;
  }

  public void setDeprecationNotice(DeprecationNotice deprecationNotice) {
    this.deprecationNotice = deprecationNotice;
  }

  public Extension description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The description of the extension
   * @return description
  **/
  @Schema(description = "The description of the extension")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Extension tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public Extension addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * The tags of the extension
   * @return tags
  **/
  @Schema(description = "The tags of the extension")
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }

  public Extension properties(List<Property> properties) {
    this.properties = properties;
    return this;
  }

  public Extension addPropertiesItem(Property propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<Property>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * The properties of the extension
   * @return properties
  **/
  @Schema(description = "The properties of the extension")
  public List<Property> getProperties() {
    return properties;
  }

  public void setProperties(List<Property> properties) {
    this.properties = properties;
  }

  public Extension dynamicProperties(List<DynamicProperty> dynamicProperties) {
    this.dynamicProperties = dynamicProperties;
    return this;
  }

  public Extension addDynamicPropertiesItem(DynamicProperty dynamicPropertiesItem) {
    if (this.dynamicProperties == null) {
      this.dynamicProperties = new ArrayList<DynamicProperty>();
    }
    this.dynamicProperties.add(dynamicPropertiesItem);
    return this;
  }

   /**
   * The dynamic properties of the extension
   * @return dynamicProperties
  **/
  @Schema(description = "The dynamic properties of the extension")
  public List<DynamicProperty> getDynamicProperties() {
    return dynamicProperties;
  }

  public void setDynamicProperties(List<DynamicProperty> dynamicProperties) {
    this.dynamicProperties = dynamicProperties;
  }

  public Extension relationships(List<Relationship> relationships) {
    this.relationships = relationships;
    return this;
  }

  public Extension addRelationshipsItem(Relationship relationshipsItem) {
    if (this.relationships == null) {
      this.relationships = new ArrayList<Relationship>();
    }
    this.relationships.add(relationshipsItem);
    return this;
  }

   /**
   * The relationships of the extension
   * @return relationships
  **/
  @Schema(description = "The relationships of the extension")
  public List<Relationship> getRelationships() {
    return relationships;
  }

  public void setRelationships(List<Relationship> relationships) {
    this.relationships = relationships;
  }

  public Extension dynamicRelationship(DynamicRelationship dynamicRelationship) {
    this.dynamicRelationship = dynamicRelationship;
    return this;
  }

   /**
   * Get dynamicRelationship
   * @return dynamicRelationship
  **/
  @Schema(description = "")
  public DynamicRelationship getDynamicRelationship() {
    return dynamicRelationship;
  }

  public void setDynamicRelationship(DynamicRelationship dynamicRelationship) {
    this.dynamicRelationship = dynamicRelationship;
  }

  public Extension readsAttributes(List<Attribute> readsAttributes) {
    this.readsAttributes = readsAttributes;
    return this;
  }

  public Extension addReadsAttributesItem(Attribute readsAttributesItem) {
    if (this.readsAttributes == null) {
      this.readsAttributes = new ArrayList<Attribute>();
    }
    this.readsAttributes.add(readsAttributesItem);
    return this;
  }

   /**
   * The attributes read from flow files by the extension
   * @return readsAttributes
  **/
  @Schema(description = "The attributes read from flow files by the extension")
  public List<Attribute> getReadsAttributes() {
    return readsAttributes;
  }

  public void setReadsAttributes(List<Attribute> readsAttributes) {
    this.readsAttributes = readsAttributes;
  }

  public Extension writesAttributes(List<Attribute> writesAttributes) {
    this.writesAttributes = writesAttributes;
    return this;
  }

  public Extension addWritesAttributesItem(Attribute writesAttributesItem) {
    if (this.writesAttributes == null) {
      this.writesAttributes = new ArrayList<Attribute>();
    }
    this.writesAttributes.add(writesAttributesItem);
    return this;
  }

   /**
   * The attributes written to flow files by the extension
   * @return writesAttributes
  **/
  @Schema(description = "The attributes written to flow files by the extension")
  public List<Attribute> getWritesAttributes() {
    return writesAttributes;
  }

  public void setWritesAttributes(List<Attribute> writesAttributes) {
    this.writesAttributes = writesAttributes;
  }

  public Extension stateful(Stateful stateful) {
    this.stateful = stateful;
    return this;
  }

   /**
   * Get stateful
   * @return stateful
  **/
  @Schema(description = "")
  public Stateful getStateful() {
    return stateful;
  }

  public void setStateful(Stateful stateful) {
    this.stateful = stateful;
  }

  public Extension restricted(Restricted restricted) {
    this.restricted = restricted;
    return this;
  }

   /**
   * Get restricted
   * @return restricted
  **/
  @Schema(description = "")
  public Restricted getRestricted() {
    return restricted;
  }

  public void setRestricted(Restricted restricted) {
    this.restricted = restricted;
  }

  public Extension inputRequirement(InputRequirementEnum inputRequirement) {
    this.inputRequirement = inputRequirement;
    return this;
  }

   /**
   * The input requirement of the extension
   * @return inputRequirement
  **/
  @Schema(description = "The input requirement of the extension")
  public InputRequirementEnum getInputRequirement() {
    return inputRequirement;
  }

  public void setInputRequirement(InputRequirementEnum inputRequirement) {
    this.inputRequirement = inputRequirement;
  }

  public Extension systemResourceConsiderations(List<SystemResourceConsideration> systemResourceConsiderations) {
    this.systemResourceConsiderations = systemResourceConsiderations;
    return this;
  }

  public Extension addSystemResourceConsiderationsItem(SystemResourceConsideration systemResourceConsiderationsItem) {
    if (this.systemResourceConsiderations == null) {
      this.systemResourceConsiderations = new ArrayList<SystemResourceConsideration>();
    }
    this.systemResourceConsiderations.add(systemResourceConsiderationsItem);
    return this;
  }

   /**
   * The resource considerations of the extension
   * @return systemResourceConsiderations
  **/
  @Schema(description = "The resource considerations of the extension")
  public List<SystemResourceConsideration> getSystemResourceConsiderations() {
    return systemResourceConsiderations;
  }

  public void setSystemResourceConsiderations(List<SystemResourceConsideration> systemResourceConsiderations) {
    this.systemResourceConsiderations = systemResourceConsiderations;
  }

  public Extension seeAlso(List<String> seeAlso) {
    this.seeAlso = seeAlso;
    return this;
  }

  public Extension addSeeAlsoItem(String seeAlsoItem) {
    if (this.seeAlso == null) {
      this.seeAlso = new ArrayList<String>();
    }
    this.seeAlso.add(seeAlsoItem);
    return this;
  }

   /**
   * The names of other extensions to see
   * @return seeAlso
  **/
  @Schema(description = "The names of other extensions to see")
  public List<String> getSeeAlso() {
    return seeAlso;
  }

  public void setSeeAlso(List<String> seeAlso) {
    this.seeAlso = seeAlso;
  }

  public Extension providedServiceAPIs(List<ProvidedServiceAPI> providedServiceAPIs) {
    this.providedServiceAPIs = providedServiceAPIs;
    return this;
  }

  public Extension addProvidedServiceAPIsItem(ProvidedServiceAPI providedServiceAPIsItem) {
    if (this.providedServiceAPIs == null) {
      this.providedServiceAPIs = new ArrayList<ProvidedServiceAPI>();
    }
    this.providedServiceAPIs.add(providedServiceAPIsItem);
    return this;
  }

   /**
   * The service APIs provided by this extension
   * @return providedServiceAPIs
  **/
  @Schema(description = "The service APIs provided by this extension")
  public List<ProvidedServiceAPI> getProvidedServiceAPIs() {
    return providedServiceAPIs;
  }

  public void setProvidedServiceAPIs(List<ProvidedServiceAPI> providedServiceAPIs) {
    this.providedServiceAPIs = providedServiceAPIs;
  }

  public Extension defaultSettings(DefaultSettings defaultSettings) {
    this.defaultSettings = defaultSettings;
    return this;
  }

   /**
   * Get defaultSettings
   * @return defaultSettings
  **/
  @Schema(description = "")
  public DefaultSettings getDefaultSettings() {
    return defaultSettings;
  }

  public void setDefaultSettings(DefaultSettings defaultSettings) {
    this.defaultSettings = defaultSettings;
  }

  public Extension defaultSchedule(DefaultSchedule defaultSchedule) {
    this.defaultSchedule = defaultSchedule;
    return this;
  }

   /**
   * Get defaultSchedule
   * @return defaultSchedule
  **/
  @Schema(description = "")
  public DefaultSchedule getDefaultSchedule() {
    return defaultSchedule;
  }

  public void setDefaultSchedule(DefaultSchedule defaultSchedule) {
    this.defaultSchedule = defaultSchedule;
  }

  public Extension triggerSerially(Boolean triggerSerially) {
    this.triggerSerially = triggerSerially;
    return this;
  }

   /**
   * Indicates that a processor should be triggered serially
   * @return triggerSerially
  **/
  @Schema(description = "Indicates that a processor should be triggered serially")
  public Boolean isTriggerSerially() {
    return triggerSerially;
  }

  public void setTriggerSerially(Boolean triggerSerially) {
    this.triggerSerially = triggerSerially;
  }

  public Extension triggerWhenEmpty(Boolean triggerWhenEmpty) {
    this.triggerWhenEmpty = triggerWhenEmpty;
    return this;
  }

   /**
   * Indicates that a processor should be triggered when the incoming queues are empty
   * @return triggerWhenEmpty
  **/
  @Schema(description = "Indicates that a processor should be triggered when the incoming queues are empty")
  public Boolean isTriggerWhenEmpty() {
    return triggerWhenEmpty;
  }

  public void setTriggerWhenEmpty(Boolean triggerWhenEmpty) {
    this.triggerWhenEmpty = triggerWhenEmpty;
  }

  public Extension triggerWhenAnyDestinationAvailable(Boolean triggerWhenAnyDestinationAvailable) {
    this.triggerWhenAnyDestinationAvailable = triggerWhenAnyDestinationAvailable;
    return this;
  }

   /**
   * Indicates that a processor should be triggered when any destinations have space for flow files
   * @return triggerWhenAnyDestinationAvailable
  **/
  @Schema(description = "Indicates that a processor should be triggered when any destinations have space for flow files")
  public Boolean isTriggerWhenAnyDestinationAvailable() {
    return triggerWhenAnyDestinationAvailable;
  }

  public void setTriggerWhenAnyDestinationAvailable(Boolean triggerWhenAnyDestinationAvailable) {
    this.triggerWhenAnyDestinationAvailable = triggerWhenAnyDestinationAvailable;
  }

  public Extension supportsBatching(Boolean supportsBatching) {
    this.supportsBatching = supportsBatching;
    return this;
  }

   /**
   * Indicates that a processor supports batching
   * @return supportsBatching
  **/
  @Schema(description = "Indicates that a processor supports batching")
  public Boolean isSupportsBatching() {
    return supportsBatching;
  }

  public void setSupportsBatching(Boolean supportsBatching) {
    this.supportsBatching = supportsBatching;
  }

  public Extension eventDriven(Boolean eventDriven) {
    this.eventDriven = eventDriven;
    return this;
  }

   /**
   * Indicates that a processor supports event driven scheduling
   * @return eventDriven
  **/
  @Schema(description = "Indicates that a processor supports event driven scheduling")
  public Boolean isEventDriven() {
    return eventDriven;
  }

  public void setEventDriven(Boolean eventDriven) {
    this.eventDriven = eventDriven;
  }

  public Extension primaryNodeOnly(Boolean primaryNodeOnly) {
    this.primaryNodeOnly = primaryNodeOnly;
    return this;
  }

   /**
   * Indicates that a processor should be scheduled only on the primary node
   * @return primaryNodeOnly
  **/
  @Schema(description = "Indicates that a processor should be scheduled only on the primary node")
  public Boolean isPrimaryNodeOnly() {
    return primaryNodeOnly;
  }

  public void setPrimaryNodeOnly(Boolean primaryNodeOnly) {
    this.primaryNodeOnly = primaryNodeOnly;
  }

  public Extension sideEffectFree(Boolean sideEffectFree) {
    this.sideEffectFree = sideEffectFree;
    return this;
  }

   /**
   * Indicates that a processor is side effect free
   * @return sideEffectFree
  **/
  @Schema(description = "Indicates that a processor is side effect free")
  public Boolean isSideEffectFree() {
    return sideEffectFree;
  }

  public void setSideEffectFree(Boolean sideEffectFree) {
    this.sideEffectFree = sideEffectFree;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Extension extension = (Extension) o;
    return Objects.equals(this.name, extension.name) &&
        Objects.equals(this.type, extension.type) &&
        Objects.equals(this.deprecationNotice, extension.deprecationNotice) &&
        Objects.equals(this.description, extension.description) &&
        Objects.equals(this.tags, extension.tags) &&
        Objects.equals(this.properties, extension.properties) &&
        Objects.equals(this.dynamicProperties, extension.dynamicProperties) &&
        Objects.equals(this.relationships, extension.relationships) &&
        Objects.equals(this.dynamicRelationship, extension.dynamicRelationship) &&
        Objects.equals(this.readsAttributes, extension.readsAttributes) &&
        Objects.equals(this.writesAttributes, extension.writesAttributes) &&
        Objects.equals(this.stateful, extension.stateful) &&
        Objects.equals(this.restricted, extension.restricted) &&
        Objects.equals(this.inputRequirement, extension.inputRequirement) &&
        Objects.equals(this.systemResourceConsiderations, extension.systemResourceConsiderations) &&
        Objects.equals(this.seeAlso, extension.seeAlso) &&
        Objects.equals(this.providedServiceAPIs, extension.providedServiceAPIs) &&
        Objects.equals(this.defaultSettings, extension.defaultSettings) &&
        Objects.equals(this.defaultSchedule, extension.defaultSchedule) &&
        Objects.equals(this.triggerSerially, extension.triggerSerially) &&
        Objects.equals(this.triggerWhenEmpty, extension.triggerWhenEmpty) &&
        Objects.equals(this.triggerWhenAnyDestinationAvailable, extension.triggerWhenAnyDestinationAvailable) &&
        Objects.equals(this.supportsBatching, extension.supportsBatching) &&
        Objects.equals(this.eventDriven, extension.eventDriven) &&
        Objects.equals(this.primaryNodeOnly, extension.primaryNodeOnly) &&
        Objects.equals(this.sideEffectFree, extension.sideEffectFree);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, deprecationNotice, description, tags, properties, dynamicProperties, relationships, dynamicRelationship, readsAttributes, writesAttributes, stateful, restricted, inputRequirement, systemResourceConsiderations, seeAlso, providedServiceAPIs, defaultSettings, defaultSchedule, triggerSerially, triggerWhenEmpty, triggerWhenAnyDestinationAvailable, supportsBatching, eventDriven, primaryNodeOnly, sideEffectFree);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Extension {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    deprecationNotice: ").append(toIndentedString(deprecationNotice)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    dynamicProperties: ").append(toIndentedString(dynamicProperties)).append("\n");
    sb.append("    relationships: ").append(toIndentedString(relationships)).append("\n");
    sb.append("    dynamicRelationship: ").append(toIndentedString(dynamicRelationship)).append("\n");
    sb.append("    readsAttributes: ").append(toIndentedString(readsAttributes)).append("\n");
    sb.append("    writesAttributes: ").append(toIndentedString(writesAttributes)).append("\n");
    sb.append("    stateful: ").append(toIndentedString(stateful)).append("\n");
    sb.append("    restricted: ").append(toIndentedString(restricted)).append("\n");
    sb.append("    inputRequirement: ").append(toIndentedString(inputRequirement)).append("\n");
    sb.append("    systemResourceConsiderations: ").append(toIndentedString(systemResourceConsiderations)).append("\n");
    sb.append("    seeAlso: ").append(toIndentedString(seeAlso)).append("\n");
    sb.append("    providedServiceAPIs: ").append(toIndentedString(providedServiceAPIs)).append("\n");
    sb.append("    defaultSettings: ").append(toIndentedString(defaultSettings)).append("\n");
    sb.append("    defaultSchedule: ").append(toIndentedString(defaultSchedule)).append("\n");
    sb.append("    triggerSerially: ").append(toIndentedString(triggerSerially)).append("\n");
    sb.append("    triggerWhenEmpty: ").append(toIndentedString(triggerWhenEmpty)).append("\n");
    sb.append("    triggerWhenAnyDestinationAvailable: ").append(toIndentedString(triggerWhenAnyDestinationAvailable)).append("\n");
    sb.append("    supportsBatching: ").append(toIndentedString(supportsBatching)).append("\n");
    sb.append("    eventDriven: ").append(toIndentedString(eventDriven)).append("\n");
    sb.append("    primaryNodeOnly: ").append(toIndentedString(primaryNodeOnly)).append("\n");
    sb.append("    sideEffectFree: ").append(toIndentedString(sideEffectFree)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
