/*
 * Apache NiFi Registry REST API
 * The REST API provides an interface to a registry with operations for saving, versioning, reading NiFi flows and components.
 *
 * OpenAPI spec version: 1.19.1
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi_registry.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.github.asamoal.nifi_registry.swagger.client.model.Bucket;
import com.github.asamoal.nifi_registry.swagger.client.model.ExternalControllerServiceReference;
import com.github.asamoal.nifi_registry.swagger.client.model.ParameterProviderReference;
import com.github.asamoal.nifi_registry.swagger.client.model.VersionedFlow;
import com.github.asamoal.nifi_registry.swagger.client.model.VersionedFlowSnapshotMetadata;
import com.github.asamoal.nifi_registry.swagger.client.model.VersionedParameterContext;
import com.github.asamoal.nifi_registry.swagger.client.model.VersionedProcessGroup;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * VersionedFlowSnapshot
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-04-12T14:23:29.468928+02:00[Europe/Berlin]")
public class VersionedFlowSnapshot {
  @SerializedName("snapshotMetadata")
  private VersionedFlowSnapshotMetadata snapshotMetadata = null;

  @SerializedName("flowContents")
  private VersionedProcessGroup flowContents = null;

  @SerializedName("externalControllerServices")
  private Map<String, ExternalControllerServiceReference> externalControllerServices = null;

  @SerializedName("parameterProviders")
  private Map<String, ParameterProviderReference> parameterProviders = null;

  @SerializedName("parameterContexts")
  private Map<String, VersionedParameterContext> parameterContexts = null;

  @SerializedName("flowEncodingVersion")
  private String flowEncodingVersion = null;

  @SerializedName("flow")
  private VersionedFlow flow = null;

  @SerializedName("bucket")
  private Bucket bucket = null;

  @SerializedName("latest")
  private Boolean latest = null;

  public VersionedFlowSnapshot snapshotMetadata(VersionedFlowSnapshotMetadata snapshotMetadata) {
    this.snapshotMetadata = snapshotMetadata;
    return this;
  }

   /**
   * Get snapshotMetadata
   * @return snapshotMetadata
  **/
  @Schema(required = true, description = "")
  public VersionedFlowSnapshotMetadata getSnapshotMetadata() {
    return snapshotMetadata;
  }

  public void setSnapshotMetadata(VersionedFlowSnapshotMetadata snapshotMetadata) {
    this.snapshotMetadata = snapshotMetadata;
  }

  public VersionedFlowSnapshot flowContents(VersionedProcessGroup flowContents) {
    this.flowContents = flowContents;
    return this;
  }

   /**
   * Get flowContents
   * @return flowContents
  **/
  @Schema(required = true, description = "")
  public VersionedProcessGroup getFlowContents() {
    return flowContents;
  }

  public void setFlowContents(VersionedProcessGroup flowContents) {
    this.flowContents = flowContents;
  }

  public VersionedFlowSnapshot externalControllerServices(Map<String, ExternalControllerServiceReference> externalControllerServices) {
    this.externalControllerServices = externalControllerServices;
    return this;
  }

  public VersionedFlowSnapshot putExternalControllerServicesItem(String key, ExternalControllerServiceReference externalControllerServicesItem) {
    if (this.externalControllerServices == null) {
      this.externalControllerServices = new HashMap<String, ExternalControllerServiceReference>();
    }
    this.externalControllerServices.put(key, externalControllerServicesItem);
    return this;
  }

   /**
   * The information about controller services that exist outside this versioned flow, but are referenced by components within the versioned flow.
   * @return externalControllerServices
  **/
  @Schema(description = "The information about controller services that exist outside this versioned flow, but are referenced by components within the versioned flow.")
  public Map<String, ExternalControllerServiceReference> getExternalControllerServices() {
    return externalControllerServices;
  }

  public void setExternalControllerServices(Map<String, ExternalControllerServiceReference> externalControllerServices) {
    this.externalControllerServices = externalControllerServices;
  }

  public VersionedFlowSnapshot parameterProviders(Map<String, ParameterProviderReference> parameterProviders) {
    this.parameterProviders = parameterProviders;
    return this;
  }

  public VersionedFlowSnapshot putParameterProvidersItem(String key, ParameterProviderReference parameterProvidersItem) {
    if (this.parameterProviders == null) {
      this.parameterProviders = new HashMap<String, ParameterProviderReference>();
    }
    this.parameterProviders.put(key, parameterProvidersItem);
    return this;
  }

   /**
   * Contains basic information about parameter providers referenced in the versioned flow.
   * @return parameterProviders
  **/
  @Schema(description = "Contains basic information about parameter providers referenced in the versioned flow.")
  public Map<String, ParameterProviderReference> getParameterProviders() {
    return parameterProviders;
  }

  public void setParameterProviders(Map<String, ParameterProviderReference> parameterProviders) {
    this.parameterProviders = parameterProviders;
  }

  public VersionedFlowSnapshot parameterContexts(Map<String, VersionedParameterContext> parameterContexts) {
    this.parameterContexts = parameterContexts;
    return this;
  }

  public VersionedFlowSnapshot putParameterContextsItem(String key, VersionedParameterContext parameterContextsItem) {
    if (this.parameterContexts == null) {
      this.parameterContexts = new HashMap<String, VersionedParameterContext>();
    }
    this.parameterContexts.put(key, parameterContextsItem);
    return this;
  }

   /**
   * The parameter contexts referenced by process groups in the flow contents. The mapping is from the name of the context to the context instance, and it is expected that any context in this map is referenced by at least one process group in this flow.
   * @return parameterContexts
  **/
  @Schema(description = "The parameter contexts referenced by process groups in the flow contents. The mapping is from the name of the context to the context instance, and it is expected that any context in this map is referenced by at least one process group in this flow.")
  public Map<String, VersionedParameterContext> getParameterContexts() {
    return parameterContexts;
  }

  public void setParameterContexts(Map<String, VersionedParameterContext> parameterContexts) {
    this.parameterContexts = parameterContexts;
  }

  public VersionedFlowSnapshot flowEncodingVersion(String flowEncodingVersion) {
    this.flowEncodingVersion = flowEncodingVersion;
    return this;
  }

   /**
   * The optional encoding version of the flow contents.
   * @return flowEncodingVersion
  **/
  @Schema(description = "The optional encoding version of the flow contents.")
  public String getFlowEncodingVersion() {
    return flowEncodingVersion;
  }

  public void setFlowEncodingVersion(String flowEncodingVersion) {
    this.flowEncodingVersion = flowEncodingVersion;
  }

  public VersionedFlowSnapshot flow(VersionedFlow flow) {
    this.flow = flow;
    return this;
  }

   /**
   * Get flow
   * @return flow
  **/
  @Schema(description = "")
  public VersionedFlow getFlow() {
    return flow;
  }

  public void setFlow(VersionedFlow flow) {
    this.flow = flow;
  }

  public VersionedFlowSnapshot bucket(Bucket bucket) {
    this.bucket = bucket;
    return this;
  }

   /**
   * Get bucket
   * @return bucket
  **/
  @Schema(description = "")
  public Bucket getBucket() {
    return bucket;
  }

  public void setBucket(Bucket bucket) {
    this.bucket = bucket;
  }

  public VersionedFlowSnapshot latest(Boolean latest) {
    this.latest = latest;
    return this;
  }

   /**
   * Get latest
   * @return latest
  **/
  @Schema(description = "")
  public Boolean isLatest() {
    return latest;
  }

  public void setLatest(Boolean latest) {
    this.latest = latest;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionedFlowSnapshot versionedFlowSnapshot = (VersionedFlowSnapshot) o;
    return Objects.equals(this.snapshotMetadata, versionedFlowSnapshot.snapshotMetadata) &&
        Objects.equals(this.flowContents, versionedFlowSnapshot.flowContents) &&
        Objects.equals(this.externalControllerServices, versionedFlowSnapshot.externalControllerServices) &&
        Objects.equals(this.parameterProviders, versionedFlowSnapshot.parameterProviders) &&
        Objects.equals(this.parameterContexts, versionedFlowSnapshot.parameterContexts) &&
        Objects.equals(this.flowEncodingVersion, versionedFlowSnapshot.flowEncodingVersion) &&
        Objects.equals(this.flow, versionedFlowSnapshot.flow) &&
        Objects.equals(this.bucket, versionedFlowSnapshot.bucket) &&
        Objects.equals(this.latest, versionedFlowSnapshot.latest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(snapshotMetadata, flowContents, externalControllerServices, parameterProviders, parameterContexts, flowEncodingVersion, flow, bucket, latest);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionedFlowSnapshot {\n");
    
    sb.append("    snapshotMetadata: ").append(toIndentedString(snapshotMetadata)).append("\n");
    sb.append("    flowContents: ").append(toIndentedString(flowContents)).append("\n");
    sb.append("    externalControllerServices: ").append(toIndentedString(externalControllerServices)).append("\n");
    sb.append("    parameterProviders: ").append(toIndentedString(parameterProviders)).append("\n");
    sb.append("    parameterContexts: ").append(toIndentedString(parameterContexts)).append("\n");
    sb.append("    flowEncodingVersion: ").append(toIndentedString(flowEncodingVersion)).append("\n");
    sb.append("    flow: ").append(toIndentedString(flow)).append("\n");
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("    latest: ").append(toIndentedString(latest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
