/*
 * Apache NiFi Registry REST API
 * The REST API provides an interface to a registry with operations for saving, versioning, reading NiFi flows and components.
 *
 * OpenAPI spec version: 1.19.1
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi_registry.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.github.asamoal.nifi_registry.swagger.client.model.ComponentDifference;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ComponentDifferenceGroup
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-04-12T14:23:29.468928+02:00[Europe/Berlin]")
public class ComponentDifferenceGroup {
  @SerializedName("componentId")
  private String componentId = null;

  @SerializedName("componentName")
  private String componentName = null;

  @SerializedName("componentType")
  private String componentType = null;

  @SerializedName("processGroupId")
  private String processGroupId = null;

  @SerializedName("differences")
  private List<ComponentDifference> differences = null;

  public ComponentDifferenceGroup componentId(String componentId) {
    this.componentId = componentId;
    return this;
  }

   /**
   * The id of the component whose changes are grouped together.
   * @return componentId
  **/
  @Schema(description = "The id of the component whose changes are grouped together.")
  public String getComponentId() {
    return componentId;
  }

  public void setComponentId(String componentId) {
    this.componentId = componentId;
  }

  public ComponentDifferenceGroup componentName(String componentName) {
    this.componentName = componentName;
    return this;
  }

   /**
   * The name of the component whose changes are grouped together.
   * @return componentName
  **/
  @Schema(description = "The name of the component whose changes are grouped together.")
  public String getComponentName() {
    return componentName;
  }

  public void setComponentName(String componentName) {
    this.componentName = componentName;
  }

  public ComponentDifferenceGroup componentType(String componentType) {
    this.componentType = componentType;
    return this;
  }

   /**
   * The type of component these changes relate to.
   * @return componentType
  **/
  @Schema(description = "The type of component these changes relate to.")
  public String getComponentType() {
    return componentType;
  }

  public void setComponentType(String componentType) {
    this.componentType = componentType;
  }

  public ComponentDifferenceGroup processGroupId(String processGroupId) {
    this.processGroupId = processGroupId;
    return this;
  }

   /**
   * The process group id for this component.
   * @return processGroupId
  **/
  @Schema(description = "The process group id for this component.")
  public String getProcessGroupId() {
    return processGroupId;
  }

  public void setProcessGroupId(String processGroupId) {
    this.processGroupId = processGroupId;
  }

  public ComponentDifferenceGroup differences(List<ComponentDifference> differences) {
    this.differences = differences;
    return this;
  }

  public ComponentDifferenceGroup addDifferencesItem(ComponentDifference differencesItem) {
    if (this.differences == null) {
      this.differences = new ArrayList<ComponentDifference>();
    }
    this.differences.add(differencesItem);
    return this;
  }

   /**
   * The list of changes related to this component between the 2 versions.
   * @return differences
  **/
  @Schema(description = "The list of changes related to this component between the 2 versions.")
  public List<ComponentDifference> getDifferences() {
    return differences;
  }

  public void setDifferences(List<ComponentDifference> differences) {
    this.differences = differences;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComponentDifferenceGroup componentDifferenceGroup = (ComponentDifferenceGroup) o;
    return Objects.equals(this.componentId, componentDifferenceGroup.componentId) &&
        Objects.equals(this.componentName, componentDifferenceGroup.componentName) &&
        Objects.equals(this.componentType, componentDifferenceGroup.componentType) &&
        Objects.equals(this.processGroupId, componentDifferenceGroup.processGroupId) &&
        Objects.equals(this.differences, componentDifferenceGroup.differences);
  }

  @Override
  public int hashCode() {
    return Objects.hash(componentId, componentName, componentType, processGroupId, differences);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComponentDifferenceGroup {\n");
    
    sb.append("    componentId: ").append(toIndentedString(componentId)).append("\n");
    sb.append("    componentName: ").append(toIndentedString(componentName)).append("\n");
    sb.append("    componentType: ").append(toIndentedString(componentType)).append("\n");
    sb.append("    processGroupId: ").append(toIndentedString(processGroupId)).append("\n");
    sb.append("    differences: ").append(toIndentedString(differences)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
