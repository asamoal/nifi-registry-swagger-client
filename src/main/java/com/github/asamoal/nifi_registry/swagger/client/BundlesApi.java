/*
 * Apache NiFi Registry REST API
 * The REST API provides an interface to a registry with operations for saving, versioning, reading NiFi flows and components.
 *
 * OpenAPI spec version: 1.20.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi_registry.swagger.client;

import com.github.asamoal.nifi_registry.swagger.ApiCallback;
import com.github.asamoal.nifi_registry.swagger.ApiClient;
import com.github.asamoal.nifi_registry.swagger.ApiException;
import com.github.asamoal.nifi_registry.swagger.ApiResponse;
import com.github.asamoal.nifi_registry.swagger.Configuration;
import com.github.asamoal.nifi_registry.swagger.Pair;
import com.github.asamoal.nifi_registry.swagger.ProgressRequestBody;
import com.github.asamoal.nifi_registry.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.asamoal.nifi_registry.swagger.client.model.BundleVersion;
import com.github.asamoal.nifi_registry.swagger.client.model.BundleVersionMetadata;
import com.github.asamoal.nifi_registry.swagger.client.model.Extension;
import com.github.asamoal.nifi_registry.swagger.client.model.ExtensionBundle;
import com.github.asamoal.nifi_registry.swagger.client.model.ExtensionMetadata;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BundlesApi {
    private ApiClient apiClient;

    public BundlesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BundlesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getBundleVersionExtensionAdditionalDetailsDocs
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @param name The fully qualified name of the extension (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBundleVersionExtensionAdditionalDetailsDocsCall(String bundleId, String version, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bundles/{bundleId}/versions/{version}/extensions/{name}/docs/additional-details"
            .replaceAll("\\{" + "bundleId" + "\\}", apiClient.escapeString(bundleId.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBundleVersionExtensionAdditionalDetailsDocsValidateBeforeCall(String bundleId, String version, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bundleId' is set
        if (bundleId == null) {
            throw new ApiException("Missing the required parameter 'bundleId' when calling getBundleVersionExtensionAdditionalDetailsDocs(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getBundleVersionExtensionAdditionalDetailsDocs(Async)");
        }
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getBundleVersionExtensionAdditionalDetailsDocs(Async)");
        }
        
        com.squareup.okhttp.Call call = getBundleVersionExtensionAdditionalDetailsDocsCall(bundleId, version, name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get bundle version extension docs details
     * Gets the additional details documentation for the given extension in the given extension bundle version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @param name The fully qualified name of the extension (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getBundleVersionExtensionAdditionalDetailsDocs(String bundleId, String version, String name) throws ApiException {
        ApiResponse<String> resp = getBundleVersionExtensionAdditionalDetailsDocsWithHttpInfo(bundleId, version, name);
        return resp.getData();
    }

    /**
     * Get bundle version extension docs details
     * Gets the additional details documentation for the given extension in the given extension bundle version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @param name The fully qualified name of the extension (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getBundleVersionExtensionAdditionalDetailsDocsWithHttpInfo(String bundleId, String version, String name) throws ApiException {
        com.squareup.okhttp.Call call = getBundleVersionExtensionAdditionalDetailsDocsValidateBeforeCall(bundleId, version, name, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get bundle version extension docs details (asynchronously)
     * Gets the additional details documentation for the given extension in the given extension bundle version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @param name The fully qualified name of the extension (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBundleVersionExtensionAdditionalDetailsDocsAsync(String bundleId, String version, String name, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBundleVersionExtensionAdditionalDetailsDocsValidateBeforeCall(bundleId, version, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBundleVersionExtensionDocs
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @param name The fully qualified name of the extension (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBundleVersionExtensionDocsCall(String bundleId, String version, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bundles/{bundleId}/versions/{version}/extensions/{name}/docs"
            .replaceAll("\\{" + "bundleId" + "\\}", apiClient.escapeString(bundleId.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBundleVersionExtensionDocsValidateBeforeCall(String bundleId, String version, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bundleId' is set
        if (bundleId == null) {
            throw new ApiException("Missing the required parameter 'bundleId' when calling getBundleVersionExtensionDocs(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getBundleVersionExtensionDocs(Async)");
        }
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getBundleVersionExtensionDocs(Async)");
        }
        
        com.squareup.okhttp.Call call = getBundleVersionExtensionDocsCall(bundleId, version, name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get bundle version extension docs
     * Gets the documentation for the given extension in the given extension bundle version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @param name The fully qualified name of the extension (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getBundleVersionExtensionDocs(String bundleId, String version, String name) throws ApiException {
        ApiResponse<String> resp = getBundleVersionExtensionDocsWithHttpInfo(bundleId, version, name);
        return resp.getData();
    }

    /**
     * Get bundle version extension docs
     * Gets the documentation for the given extension in the given extension bundle version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @param name The fully qualified name of the extension (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getBundleVersionExtensionDocsWithHttpInfo(String bundleId, String version, String name) throws ApiException {
        com.squareup.okhttp.Call call = getBundleVersionExtensionDocsValidateBeforeCall(bundleId, version, name, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get bundle version extension docs (asynchronously)
     * Gets the documentation for the given extension in the given extension bundle version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @param name The fully qualified name of the extension (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBundleVersionExtensionDocsAsync(String bundleId, String version, String name, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBundleVersionExtensionDocsValidateBeforeCall(bundleId, version, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBundleVersions
     * @param groupId Optional groupId to filter results. The value may be an exact match, or a wildcard, such as &#x27;com.%&#x27; to select all bundle versions where the groupId starts with &#x27;com.&#x27;. (optional)
     * @param artifactId Optional artifactId to filter results. The value may be an exact match, or a wildcard, such as &#x27;nifi-%&#x27; to select all bundle versions where the artifactId starts with &#x27;nifi-&#x27;. (optional)
     * @param version Optional version to filter results. The value maye be an exact match, or a wildcard, such as &#x27;1.0.%&#x27; to select all bundle versions where the version starts with &#x27;1.0.&#x27;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBundleVersionsCall(String groupId, String artifactId, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bundles/versions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (groupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupId", groupId));
        if (artifactId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("artifactId", artifactId));
        if (version != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("version", version));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBundleVersionsValidateBeforeCall(String groupId, String artifactId, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getBundleVersionsCall(groupId, artifactId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all bundle versions
     * Gets the metadata about extension bundle versions across all authorized buckets with optional filters applied. If the user is not authorized to any buckets, an empty list will be returned.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param groupId Optional groupId to filter results. The value may be an exact match, or a wildcard, such as &#x27;com.%&#x27; to select all bundle versions where the groupId starts with &#x27;com.&#x27;. (optional)
     * @param artifactId Optional artifactId to filter results. The value may be an exact match, or a wildcard, such as &#x27;nifi-%&#x27; to select all bundle versions where the artifactId starts with &#x27;nifi-&#x27;. (optional)
     * @param version Optional version to filter results. The value maye be an exact match, or a wildcard, such as &#x27;1.0.%&#x27; to select all bundle versions where the version starts with &#x27;1.0.&#x27;. (optional)
     * @return List&lt;BundleVersionMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BundleVersionMetadata> getBundleVersions(String groupId, String artifactId, String version) throws ApiException {
        ApiResponse<List<BundleVersionMetadata>> resp = getBundleVersionsWithHttpInfo(groupId, artifactId, version);
        return resp.getData();
    }

    /**
     * Get all bundle versions
     * Gets the metadata about extension bundle versions across all authorized buckets with optional filters applied. If the user is not authorized to any buckets, an empty list will be returned.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param groupId Optional groupId to filter results. The value may be an exact match, or a wildcard, such as &#x27;com.%&#x27; to select all bundle versions where the groupId starts with &#x27;com.&#x27;. (optional)
     * @param artifactId Optional artifactId to filter results. The value may be an exact match, or a wildcard, such as &#x27;nifi-%&#x27; to select all bundle versions where the artifactId starts with &#x27;nifi-&#x27;. (optional)
     * @param version Optional version to filter results. The value maye be an exact match, or a wildcard, such as &#x27;1.0.%&#x27; to select all bundle versions where the version starts with &#x27;1.0.&#x27;. (optional)
     * @return ApiResponse&lt;List&lt;BundleVersionMetadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BundleVersionMetadata>> getBundleVersionsWithHttpInfo(String groupId, String artifactId, String version) throws ApiException {
        com.squareup.okhttp.Call call = getBundleVersionsValidateBeforeCall(groupId, artifactId, version, null, null);
        Type localVarReturnType = new TypeToken<List<BundleVersionMetadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all bundle versions (asynchronously)
     * Gets the metadata about extension bundle versions across all authorized buckets with optional filters applied. If the user is not authorized to any buckets, an empty list will be returned.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param groupId Optional groupId to filter results. The value may be an exact match, or a wildcard, such as &#x27;com.%&#x27; to select all bundle versions where the groupId starts with &#x27;com.&#x27;. (optional)
     * @param artifactId Optional artifactId to filter results. The value may be an exact match, or a wildcard, such as &#x27;nifi-%&#x27; to select all bundle versions where the artifactId starts with &#x27;nifi-&#x27;. (optional)
     * @param version Optional version to filter results. The value maye be an exact match, or a wildcard, such as &#x27;1.0.%&#x27; to select all bundle versions where the version starts with &#x27;1.0.&#x27;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBundleVersionsAsync(String groupId, String artifactId, String version, final ApiCallback<List<BundleVersionMetadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBundleVersionsValidateBeforeCall(groupId, artifactId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BundleVersionMetadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBundles
     * @param bucketName Optional bucket name to filter results. The value may be an exact match, or a wildcard, such as &#x27;My Bucket%&#x27; to select all bundles where the bucket name starts with &#x27;My Bucket&#x27;. (optional)
     * @param groupId Optional groupId to filter results. The value may be an exact match, or a wildcard, such as &#x27;com.%&#x27; to select all bundles where the groupId starts with &#x27;com.&#x27;. (optional)
     * @param artifactId Optional artifactId to filter results. The value may be an exact match, or a wildcard, such as &#x27;nifi-%&#x27; to select all bundles where the artifactId starts with &#x27;nifi-&#x27;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBundlesCall(String bucketName, String groupId, String artifactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bundles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (bucketName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bucketName", bucketName));
        if (groupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupId", groupId));
        if (artifactId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("artifactId", artifactId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBundlesValidateBeforeCall(String bucketName, String groupId, String artifactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getBundlesCall(bucketName, groupId, artifactId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all bundles
     * Gets the metadata for all bundles across all authorized buckets with optional filters applied. The returned results will include only items from buckets for which the user is authorized. If the user is not authorized to any buckets, an empty list will be returned.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName Optional bucket name to filter results. The value may be an exact match, or a wildcard, such as &#x27;My Bucket%&#x27; to select all bundles where the bucket name starts with &#x27;My Bucket&#x27;. (optional)
     * @param groupId Optional groupId to filter results. The value may be an exact match, or a wildcard, such as &#x27;com.%&#x27; to select all bundles where the groupId starts with &#x27;com.&#x27;. (optional)
     * @param artifactId Optional artifactId to filter results. The value may be an exact match, or a wildcard, such as &#x27;nifi-%&#x27; to select all bundles where the artifactId starts with &#x27;nifi-&#x27;. (optional)
     * @return List&lt;ExtensionBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ExtensionBundle> getBundles(String bucketName, String groupId, String artifactId) throws ApiException {
        ApiResponse<List<ExtensionBundle>> resp = getBundlesWithHttpInfo(bucketName, groupId, artifactId);
        return resp.getData();
    }

    /**
     * Get all bundles
     * Gets the metadata for all bundles across all authorized buckets with optional filters applied. The returned results will include only items from buckets for which the user is authorized. If the user is not authorized to any buckets, an empty list will be returned.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName Optional bucket name to filter results. The value may be an exact match, or a wildcard, such as &#x27;My Bucket%&#x27; to select all bundles where the bucket name starts with &#x27;My Bucket&#x27;. (optional)
     * @param groupId Optional groupId to filter results. The value may be an exact match, or a wildcard, such as &#x27;com.%&#x27; to select all bundles where the groupId starts with &#x27;com.&#x27;. (optional)
     * @param artifactId Optional artifactId to filter results. The value may be an exact match, or a wildcard, such as &#x27;nifi-%&#x27; to select all bundles where the artifactId starts with &#x27;nifi-&#x27;. (optional)
     * @return ApiResponse&lt;List&lt;ExtensionBundle&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ExtensionBundle>> getBundlesWithHttpInfo(String bucketName, String groupId, String artifactId) throws ApiException {
        com.squareup.okhttp.Call call = getBundlesValidateBeforeCall(bucketName, groupId, artifactId, null, null);
        Type localVarReturnType = new TypeToken<List<ExtensionBundle>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all bundles (asynchronously)
     * Gets the metadata for all bundles across all authorized buckets with optional filters applied. The returned results will include only items from buckets for which the user is authorized. If the user is not authorized to any buckets, an empty list will be returned.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bucketName Optional bucket name to filter results. The value may be an exact match, or a wildcard, such as &#x27;My Bucket%&#x27; to select all bundles where the bucket name starts with &#x27;My Bucket&#x27;. (optional)
     * @param groupId Optional groupId to filter results. The value may be an exact match, or a wildcard, such as &#x27;com.%&#x27; to select all bundles where the groupId starts with &#x27;com.&#x27;. (optional)
     * @param artifactId Optional artifactId to filter results. The value may be an exact match, or a wildcard, such as &#x27;nifi-%&#x27; to select all bundles where the artifactId starts with &#x27;nifi-&#x27;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBundlesAsync(String bucketName, String groupId, String artifactId, final ApiCallback<List<ExtensionBundle>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBundlesValidateBeforeCall(bucketName, groupId, artifactId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ExtensionBundle>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for globalDeleteBundleVersion
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call globalDeleteBundleVersionCall(String bundleId, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bundles/{bundleId}/versions/{version}"
            .replaceAll("\\{" + "bundleId" + "\\}", apiClient.escapeString(bundleId.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call globalDeleteBundleVersionValidateBeforeCall(String bundleId, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bundleId' is set
        if (bundleId == null) {
            throw new ApiException("Missing the required parameter 'bundleId' when calling globalDeleteBundleVersion(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling globalDeleteBundleVersion(Async)");
        }
        
        com.squareup.okhttp.Call call = globalDeleteBundleVersionCall(bundleId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete bundle version
     * Deletes the given extension bundle version and it&#x27;s associated binary content.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @return BundleVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BundleVersion globalDeleteBundleVersion(String bundleId, String version) throws ApiException {
        ApiResponse<BundleVersion> resp = globalDeleteBundleVersionWithHttpInfo(bundleId, version);
        return resp.getData();
    }

    /**
     * Delete bundle version
     * Deletes the given extension bundle version and it&#x27;s associated binary content.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @return ApiResponse&lt;BundleVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BundleVersion> globalDeleteBundleVersionWithHttpInfo(String bundleId, String version) throws ApiException {
        com.squareup.okhttp.Call call = globalDeleteBundleVersionValidateBeforeCall(bundleId, version, null, null);
        Type localVarReturnType = new TypeToken<BundleVersion>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete bundle version (asynchronously)
     * Deletes the given extension bundle version and it&#x27;s associated binary content.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call globalDeleteBundleVersionAsync(String bundleId, String version, final ApiCallback<BundleVersion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = globalDeleteBundleVersionValidateBeforeCall(bundleId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BundleVersion>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for globalDeleteExtensionBundle
     * @param bundleId The extension bundle identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call globalDeleteExtensionBundleCall(String bundleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bundles/{bundleId}"
            .replaceAll("\\{" + "bundleId" + "\\}", apiClient.escapeString(bundleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call globalDeleteExtensionBundleValidateBeforeCall(String bundleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bundleId' is set
        if (bundleId == null) {
            throw new ApiException("Missing the required parameter 'bundleId' when calling globalDeleteExtensionBundle(Async)");
        }
        
        com.squareup.okhttp.Call call = globalDeleteExtensionBundleCall(bundleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete bundle
     * Deletes the given extension bundle and all of it&#x27;s versions.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @return ExtensionBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExtensionBundle globalDeleteExtensionBundle(String bundleId) throws ApiException {
        ApiResponse<ExtensionBundle> resp = globalDeleteExtensionBundleWithHttpInfo(bundleId);
        return resp.getData();
    }

    /**
     * Delete bundle
     * Deletes the given extension bundle and all of it&#x27;s versions.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @return ApiResponse&lt;ExtensionBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExtensionBundle> globalDeleteExtensionBundleWithHttpInfo(String bundleId) throws ApiException {
        com.squareup.okhttp.Call call = globalDeleteExtensionBundleValidateBeforeCall(bundleId, null, null);
        Type localVarReturnType = new TypeToken<ExtensionBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete bundle (asynchronously)
     * Deletes the given extension bundle and all of it&#x27;s versions.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call globalDeleteExtensionBundleAsync(String bundleId, final ApiCallback<ExtensionBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = globalDeleteExtensionBundleValidateBeforeCall(bundleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExtensionBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for globalGetBundleVersion
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call globalGetBundleVersionCall(String bundleId, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bundles/{bundleId}/versions/{version}"
            .replaceAll("\\{" + "bundleId" + "\\}", apiClient.escapeString(bundleId.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call globalGetBundleVersionValidateBeforeCall(String bundleId, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bundleId' is set
        if (bundleId == null) {
            throw new ApiException("Missing the required parameter 'bundleId' when calling globalGetBundleVersion(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling globalGetBundleVersion(Async)");
        }
        
        com.squareup.okhttp.Call call = globalGetBundleVersionCall(bundleId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get bundle version
     * Gets the descriptor for the given version of the given extension bundle.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @return BundleVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BundleVersion globalGetBundleVersion(String bundleId, String version) throws ApiException {
        ApiResponse<BundleVersion> resp = globalGetBundleVersionWithHttpInfo(bundleId, version);
        return resp.getData();
    }

    /**
     * Get bundle version
     * Gets the descriptor for the given version of the given extension bundle.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @return ApiResponse&lt;BundleVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BundleVersion> globalGetBundleVersionWithHttpInfo(String bundleId, String version) throws ApiException {
        com.squareup.okhttp.Call call = globalGetBundleVersionValidateBeforeCall(bundleId, version, null, null);
        Type localVarReturnType = new TypeToken<BundleVersion>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get bundle version (asynchronously)
     * Gets the descriptor for the given version of the given extension bundle.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call globalGetBundleVersionAsync(String bundleId, String version, final ApiCallback<BundleVersion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = globalGetBundleVersionValidateBeforeCall(bundleId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BundleVersion>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for globalGetBundleVersionContent
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call globalGetBundleVersionContentCall(String bundleId, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bundles/{bundleId}/versions/{version}/content"
            .replaceAll("\\{" + "bundleId" + "\\}", apiClient.escapeString(bundleId.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call globalGetBundleVersionContentValidateBeforeCall(String bundleId, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bundleId' is set
        if (bundleId == null) {
            throw new ApiException("Missing the required parameter 'bundleId' when calling globalGetBundleVersionContent(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling globalGetBundleVersionContent(Async)");
        }
        
        com.squareup.okhttp.Call call = globalGetBundleVersionContentCall(bundleId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get bundle version content
     * Gets the binary content for the given version of the given extension bundle.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @return List&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<byte[]> globalGetBundleVersionContent(String bundleId, String version) throws ApiException {
        ApiResponse<List<byte[]>> resp = globalGetBundleVersionContentWithHttpInfo(bundleId, version);
        return resp.getData();
    }

    /**
     * Get bundle version content
     * Gets the binary content for the given version of the given extension bundle.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @return ApiResponse&lt;List&lt;byte[]&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<byte[]>> globalGetBundleVersionContentWithHttpInfo(String bundleId, String version) throws ApiException {
        com.squareup.okhttp.Call call = globalGetBundleVersionContentValidateBeforeCall(bundleId, version, null, null);
        Type localVarReturnType = new TypeToken<List<byte[]>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get bundle version content (asynchronously)
     * Gets the binary content for the given version of the given extension bundle.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call globalGetBundleVersionContentAsync(String bundleId, String version, final ApiCallback<List<byte[]>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = globalGetBundleVersionContentValidateBeforeCall(bundleId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<byte[]>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for globalGetBundleVersionExtension
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @param name The fully qualified name of the extension (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call globalGetBundleVersionExtensionCall(String bundleId, String version, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bundles/{bundleId}/versions/{version}/extensions/{name}"
            .replaceAll("\\{" + "bundleId" + "\\}", apiClient.escapeString(bundleId.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call globalGetBundleVersionExtensionValidateBeforeCall(String bundleId, String version, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bundleId' is set
        if (bundleId == null) {
            throw new ApiException("Missing the required parameter 'bundleId' when calling globalGetBundleVersionExtension(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling globalGetBundleVersionExtension(Async)");
        }
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling globalGetBundleVersionExtension(Async)");
        }
        
        com.squareup.okhttp.Call call = globalGetBundleVersionExtensionCall(bundleId, version, name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get bundle version extension
     * Gets the metadata about the extension with the given name in the given extension bundle version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @param name The fully qualified name of the extension (required)
     * @return List&lt;Extension&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Extension> globalGetBundleVersionExtension(String bundleId, String version, String name) throws ApiException {
        ApiResponse<List<Extension>> resp = globalGetBundleVersionExtensionWithHttpInfo(bundleId, version, name);
        return resp.getData();
    }

    /**
     * Get bundle version extension
     * Gets the metadata about the extension with the given name in the given extension bundle version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @param name The fully qualified name of the extension (required)
     * @return ApiResponse&lt;List&lt;Extension&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Extension>> globalGetBundleVersionExtensionWithHttpInfo(String bundleId, String version, String name) throws ApiException {
        com.squareup.okhttp.Call call = globalGetBundleVersionExtensionValidateBeforeCall(bundleId, version, name, null, null);
        Type localVarReturnType = new TypeToken<List<Extension>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get bundle version extension (asynchronously)
     * Gets the metadata about the extension with the given name in the given extension bundle version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @param name The fully qualified name of the extension (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call globalGetBundleVersionExtensionAsync(String bundleId, String version, String name, final ApiCallback<List<Extension>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = globalGetBundleVersionExtensionValidateBeforeCall(bundleId, version, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Extension>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for globalGetBundleVersionExtensions
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call globalGetBundleVersionExtensionsCall(String bundleId, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bundles/{bundleId}/versions/{version}/extensions"
            .replaceAll("\\{" + "bundleId" + "\\}", apiClient.escapeString(bundleId.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call globalGetBundleVersionExtensionsValidateBeforeCall(String bundleId, String version, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bundleId' is set
        if (bundleId == null) {
            throw new ApiException("Missing the required parameter 'bundleId' when calling globalGetBundleVersionExtensions(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling globalGetBundleVersionExtensions(Async)");
        }
        
        com.squareup.okhttp.Call call = globalGetBundleVersionExtensionsCall(bundleId, version, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get bundle version extensions
     * Gets the metadata about the extensions in the given extension bundle version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @return List&lt;ExtensionMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ExtensionMetadata> globalGetBundleVersionExtensions(String bundleId, String version) throws ApiException {
        ApiResponse<List<ExtensionMetadata>> resp = globalGetBundleVersionExtensionsWithHttpInfo(bundleId, version);
        return resp.getData();
    }

    /**
     * Get bundle version extensions
     * Gets the metadata about the extensions in the given extension bundle version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @return ApiResponse&lt;List&lt;ExtensionMetadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ExtensionMetadata>> globalGetBundleVersionExtensionsWithHttpInfo(String bundleId, String version) throws ApiException {
        com.squareup.okhttp.Call call = globalGetBundleVersionExtensionsValidateBeforeCall(bundleId, version, null, null);
        Type localVarReturnType = new TypeToken<List<ExtensionMetadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get bundle version extensions (asynchronously)
     * Gets the metadata about the extensions in the given extension bundle version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @param version The version of the bundle (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call globalGetBundleVersionExtensionsAsync(String bundleId, String version, final ApiCallback<List<ExtensionMetadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = globalGetBundleVersionExtensionsValidateBeforeCall(bundleId, version, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ExtensionMetadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for globalGetBundleVersions
     * @param bundleId The extension bundle identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call globalGetBundleVersionsCall(String bundleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bundles/{bundleId}/versions"
            .replaceAll("\\{" + "bundleId" + "\\}", apiClient.escapeString(bundleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call globalGetBundleVersionsValidateBeforeCall(String bundleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bundleId' is set
        if (bundleId == null) {
            throw new ApiException("Missing the required parameter 'bundleId' when calling globalGetBundleVersions(Async)");
        }
        
        com.squareup.okhttp.Call call = globalGetBundleVersionsCall(bundleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get bundle versions
     * Gets the metadata for the versions of the given extension bundle.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @return List&lt;BundleVersionMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BundleVersionMetadata> globalGetBundleVersions(String bundleId) throws ApiException {
        ApiResponse<List<BundleVersionMetadata>> resp = globalGetBundleVersionsWithHttpInfo(bundleId);
        return resp.getData();
    }

    /**
     * Get bundle versions
     * Gets the metadata for the versions of the given extension bundle.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @return ApiResponse&lt;List&lt;BundleVersionMetadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BundleVersionMetadata>> globalGetBundleVersionsWithHttpInfo(String bundleId) throws ApiException {
        com.squareup.okhttp.Call call = globalGetBundleVersionsValidateBeforeCall(bundleId, null, null);
        Type localVarReturnType = new TypeToken<List<BundleVersionMetadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get bundle versions (asynchronously)
     * Gets the metadata for the versions of the given extension bundle.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call globalGetBundleVersionsAsync(String bundleId, final ApiCallback<List<BundleVersionMetadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = globalGetBundleVersionsValidateBeforeCall(bundleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BundleVersionMetadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for globalGetExtensionBundle
     * @param bundleId The extension bundle identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call globalGetExtensionBundleCall(String bundleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bundles/{bundleId}"
            .replaceAll("\\{" + "bundleId" + "\\}", apiClient.escapeString(bundleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call globalGetExtensionBundleValidateBeforeCall(String bundleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'bundleId' is set
        if (bundleId == null) {
            throw new ApiException("Missing the required parameter 'bundleId' when calling globalGetExtensionBundle(Async)");
        }
        
        com.squareup.okhttp.Call call = globalGetExtensionBundleCall(bundleId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get bundle
     * Gets the metadata about an extension bundle.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @return ExtensionBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExtensionBundle globalGetExtensionBundle(String bundleId) throws ApiException {
        ApiResponse<ExtensionBundle> resp = globalGetExtensionBundleWithHttpInfo(bundleId);
        return resp.getData();
    }

    /**
     * Get bundle
     * Gets the metadata about an extension bundle.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @return ApiResponse&lt;ExtensionBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExtensionBundle> globalGetExtensionBundleWithHttpInfo(String bundleId) throws ApiException {
        com.squareup.okhttp.Call call = globalGetExtensionBundleValidateBeforeCall(bundleId, null, null);
        Type localVarReturnType = new TypeToken<ExtensionBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get bundle (asynchronously)
     * Gets the metadata about an extension bundle.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     * @param bundleId The extension bundle identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call globalGetExtensionBundleAsync(String bundleId, final ApiCallback<ExtensionBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = globalGetExtensionBundleValidateBeforeCall(bundleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExtensionBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
