/*
 * Apache NiFi Registry REST API
 * The REST API provides an interface to a registry with operations for saving, versioning, reading NiFi flows and components.
 *
 * OpenAPI spec version: 1.20.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi_registry.swagger.client;

import com.github.asamoal.nifi_registry.swagger.client.model.BundleVersion;
import com.github.asamoal.nifi_registry.swagger.client.model.BundleVersionMetadata;
import com.github.asamoal.nifi_registry.swagger.client.model.Extension;
import com.github.asamoal.nifi_registry.swagger.client.model.ExtensionBundle;
import com.github.asamoal.nifi_registry.swagger.client.model.ExtensionMetadata;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for BundlesApi
 */
@Ignore
public class BundlesApiTest {

    private final BundlesApi api = new BundlesApi();

    /**
     * Get bundle version extension docs details
     *
     * Gets the additional details documentation for the given extension in the given extension bundle version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getBundleVersionExtensionAdditionalDetailsDocsTest() throws Exception {
        String bundleId = null;
        String version = null;
        String name = null;
        String response = api.getBundleVersionExtensionAdditionalDetailsDocs(bundleId, version, name);

        // TODO: test validations
    }
    /**
     * Get bundle version extension docs
     *
     * Gets the documentation for the given extension in the given extension bundle version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getBundleVersionExtensionDocsTest() throws Exception {
        String bundleId = null;
        String version = null;
        String name = null;
        String response = api.getBundleVersionExtensionDocs(bundleId, version, name);

        // TODO: test validations
    }
    /**
     * Get all bundle versions
     *
     * Gets the metadata about extension bundle versions across all authorized buckets with optional filters applied. If the user is not authorized to any buckets, an empty list will be returned.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getBundleVersionsTest() throws Exception {
        String groupId = null;
        String artifactId = null;
        String version = null;
        List<BundleVersionMetadata> response = api.getBundleVersions(groupId, artifactId, version);

        // TODO: test validations
    }
    /**
     * Get all bundles
     *
     * Gets the metadata for all bundles across all authorized buckets with optional filters applied. The returned results will include only items from buckets for which the user is authorized. If the user is not authorized to any buckets, an empty list will be returned.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getBundlesTest() throws Exception {
        String bucketName = null;
        String groupId = null;
        String artifactId = null;
        List<ExtensionBundle> response = api.getBundles(bucketName, groupId, artifactId);

        // TODO: test validations
    }
    /**
     * Delete bundle version
     *
     * Deletes the given extension bundle version and it&#x27;s associated binary content.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void globalDeleteBundleVersionTest() throws Exception {
        String bundleId = null;
        String version = null;
        BundleVersion response = api.globalDeleteBundleVersion(bundleId, version);

        // TODO: test validations
    }
    /**
     * Delete bundle
     *
     * Deletes the given extension bundle and all of it&#x27;s versions.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void globalDeleteExtensionBundleTest() throws Exception {
        String bundleId = null;
        ExtensionBundle response = api.globalDeleteExtensionBundle(bundleId);

        // TODO: test validations
    }
    /**
     * Get bundle version
     *
     * Gets the descriptor for the given version of the given extension bundle.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void globalGetBundleVersionTest() throws Exception {
        String bundleId = null;
        String version = null;
        BundleVersion response = api.globalGetBundleVersion(bundleId, version);

        // TODO: test validations
    }
    /**
     * Get bundle version content
     *
     * Gets the binary content for the given version of the given extension bundle.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void globalGetBundleVersionContentTest() throws Exception {
        String bundleId = null;
        String version = null;
        List<byte[]> response = api.globalGetBundleVersionContent(bundleId, version);

        // TODO: test validations
    }
    /**
     * Get bundle version extension
     *
     * Gets the metadata about the extension with the given name in the given extension bundle version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void globalGetBundleVersionExtensionTest() throws Exception {
        String bundleId = null;
        String version = null;
        String name = null;
        List<Extension> response = api.globalGetBundleVersionExtension(bundleId, version, name);

        // TODO: test validations
    }
    /**
     * Get bundle version extensions
     *
     * Gets the metadata about the extensions in the given extension bundle version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void globalGetBundleVersionExtensionsTest() throws Exception {
        String bundleId = null;
        String version = null;
        List<ExtensionMetadata> response = api.globalGetBundleVersionExtensions(bundleId, version);

        // TODO: test validations
    }
    /**
     * Get bundle versions
     *
     * Gets the metadata for the versions of the given extension bundle.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void globalGetBundleVersionsTest() throws Exception {
        String bundleId = null;
        List<BundleVersionMetadata> response = api.globalGetBundleVersions(bundleId);

        // TODO: test validations
    }
    /**
     * Get bundle
     *
     * Gets the metadata about an extension bundle.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void globalGetExtensionBundleTest() throws Exception {
        String bundleId = null;
        ExtensionBundle response = api.globalGetExtensionBundle(bundleId);

        // TODO: test validations
    }
}
